{
  "name": "grunt-teamcity",
  "description": "Send grunt log warnings in TeamCity service message format.",
  "version": "0.1.3",
  "homepage": "https://github.com/johnhunter/grunt-teamcity",
  "author": {
    "name": "John Hunter",
    "email": "john@johnhunter.info"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/johnhunter/grunt-teamcity.git"
  },
  "bugs": {
    "url": "https://github.com/johnhunter/grunt-teamcity/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt": "~0.4.1",
    "grunt-bump": "0.0.11"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "teamcity"
  ],
  "readme": "# grunt-teamcity\n\n> Send gruntjs log warnings in TeamCity service message format.\n\n[![Build Status](https://travis-ci.org/johnhunter/grunt-teamcity.png)](https://travis-ci.org/johnhunter/grunt-teamcity)\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-teamcity --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-teamcity');\n```\n\n## The \"teamcity\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `teamcity` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  teamcity: {\n    options: {\n      // Task-specific options go here.\n    },\n    all: {}\n  }\n})\n```\n\n### Options\n\n#### options.suppressGruntLog\nType: `Boolean`\nDefault value: `false`\n\nA boolean that when true will suppress the grunt log output - only the TeamCity service message will be sent to the console.\n\n#### options.status\nType: `Object`\nDefault value:\n```js\n{\n  warning: 'ERROR',\n  failure: 'FAILURE',\n  error: 'ERROR'\n}\n```\n\nA hash that maps grunt log message types to [TeamCity service message statuses](http://confluence.jetbrains.com/display/TCD8/Build+Script+Interaction+with+TeamCity#BuildScriptInteractionwithTeamCity-ReportingMessagesForBuildLog). Note that the TeamCity 'WARNING' status does not flag a task as failed.\n\n### Usage Examples\n\n#### Default Options\nDefault options are normally all you need so no config section is required. Make sure that you include the teamcity as the first task so that the messaging is setup for all subsequent tasks. In this example we run concat as the default task but set the teamcity logging first.\n\n```js\ngrunt.registerTask('default', ['teamcity', 'concat']);\n\ngrunt.initConfig({\n  teamcity: {\n    all: {} // need a task even if its an empty one\n  }\n})\n```\nAs grunt-teamcity is a multitask you need to define at least one subtask, e.g. `all`\n\n#### Custom Options\nIn this example, custom options are used to turn off the normal grunt logs for warning, fail and error. We have also redefined the status hash to report grunt warnings as Teamcity warnings (so they don't cause the task to fail).\n\n```js\ngrunt.initConfig({\n  teamcity: {\n    options: {\n      suppressGruntLog: true,\n      status: {\n        warning: 'WARNING',\n        failure: 'FAILURE',\n        error: 'ERROR'\n      }\n    }\n  },\n  concat: {\n    //...\n  }\n```\n\n## Windows users\n\nTeamcity on windows does not flush the stdout stream before exiting the grunt node process. There has been some work around this in both nodejs and grunt, but it is by no means resolved. If you see missing output in your Teamcity build log then try running the grunt task using the TC [command line runner](http://confluence.jetbrains.com/display/TCD8/Command+Line) by redirecting output to a file, e.g:\n```shell\ngrunt default --no-color > grunt.tmp & type grunt.tmp & del grunt.tmp\n```\nSeems that by redirecting to a file the output is synchronous, whereas with pipe (or TC plugin execute method) the output is async and not captured before the node process exits.\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n### v0.1.1\n- Make it a multitask\n- Add tests\n- Ready for publish to https://npmjs.org\n\n### v0.1.2\n- update readme and contact info\n\n### v0.1.3\n- Ensure TeamCity messages don't get parsed twice\n- Add travis CI\n\n",
  "readmeFilename": "README.md",
  "_id": "grunt-teamcity@0.1.3",
  "_from": "grunt-teamcity@"
}
