<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Expando</name>
    </assembly>
    <members>
        <member name="M:Westwind.Utilities.Dynamic.Utilities.GetTypeFromName(System.String)">
            <summary>
            Helper routine that looks up a type name and tries to retrieve the
            full type reference in the actively executing assemblies.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.Utilities.MapTypeToXmlType(System.Type)">
            <summary>
            Converts a .NET type into an XML compatible type - roughly
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Utilities.Dynamic.Expando">
            <summary>
            Class that provides extensible properties and methods to an
            existing object when cast to dynamic. This
            dynamic object stores 'extra' properties in a dictionary or
            checks the actual properties of the instance passed via 
            constructor.
            
            This class can be subclassed to extend an existing type or 
            you can pass in an instance to extend. Properties (both
            dynamic and strongly typed) can be accessed through an 
            indexer.
            
            This type allows you three ways to access its properties:
            
            Directly: any explicitly declared properties are accessible
            Dynamic: dynamic cast allows access to dictionary and native properties/methods
            Dictionary: Any of the extended properties are accessible via IDictionary interface
            </summary>
        </member>
        <member name="F:Westwind.Utilities.Dynamic.Expando.Instance">
            <summary>
            Instance of object passed in
            </summary>
        </member>
        <member name="F:Westwind.Utilities.Dynamic.Expando.InstanceType">
            <summary>
            Cached type of the instance
            </summary>
        </member>
        <member name="F:Westwind.Utilities.Dynamic.Expando.Properties">
            <summary>
            String Dictionary that contains the extra dynamic values
            stored on this object/instance
            </summary>        
            <remarks>Using PropertyBag to support XML Serialization of the dictionary</remarks>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.Expando.#ctor">
            <summary>
            This constructor just works off the internal dictionary and any 
            public properties of this object.
            
            Note you can subclass Expando.
            </summary>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.Expando.#ctor(System.Object)">
            <summary>
            Allows passing in an existing instance variable to 'extend'.        
            </summary>
            <remarks>
            You can pass in null here if you don't want to 
            check native properties and only check the Dictionary!
            </remarks>
            <param name="instance"></param>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.Expando.GetDynamicMemberNames">
            <summary>
            Return both instance and dynamic names.
            
            Important to return both so JSON serialization with 
            Json.NET works.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.Expando.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Try to retrieve a member by name first from instance properties
            followed by the collection entries.
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.Expando.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Property setter implementation tries to retrieve value from instance 
            first then into this object
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.Expando.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Dynamic invocation method. Currently allows only for Reflection based
            operation (no ability to add methods dynamically).
            </summary>
            <param name="binder"></param>
            <param name="args"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.Expando.GetProperty(System.Object,System.String,System.Object@)">
            <summary>
            Reflection Helper method to retrieve a property
            </summary>
            <param name="instance"></param>
            <param name="name"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.Expando.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Reflection helper method to set a property value
            </summary>
            <param name="instance"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.Expando.InvokeMethod(System.Object,System.String,System.Object[],System.Object@)">
            <summary>
            Reflection helper method to invoke a method
            </summary>
            <param name="instance"></param>
            <param name="name"></param>
            <param name="args"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.Expando.GetProperties(System.Boolean)">
            <summary>
            Returns and the properties of 
            </summary>
            <param name="includeProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.Expando.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object},System.Boolean)">
            <summary>
            Checks whether a property exists in the Property collection
            or as a property on the instance
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:Westwind.Utilities.Dynamic.Expando.Item(System.String)">
            <summary>
            Convenience method that provides a string Indexer 
            to the Properties collection AND the strongly typed
            properties of the object by name.
            
            // dynamic
            exp["Address"] = "112 nowhere lane"; 
            // strong
            var name = exp["StronglyTypedProperty"] as string; 
            </summary>
            <remarks>
            The getter checks the Properties dictionary first
            then looks in PropertyInfo for properties.
            The setter checks the instance properties before
            checking the Properties dictionary.
            </remarks>
            <param name="key"></param>
            
            <returns></returns>
        </member>
        <member name="T:Westwind.Utilities.Dynamic.PropertyBag">
            <summary>
            Creates a serializable string/object dictionary that is XML serializable
            Encodes keys as element names and values as simple values with a type
            attribute that contains an XML type name. Complex names encode the type 
            name with type='___namespace.classname' format followed by a standard xml
            serialized format. The latter serialization can be slow so it's not recommended
            to pass complex types if performance is critical.
            </summary>
        </member>
        <member name="T:Westwind.Utilities.Dynamic.PropertyBag`1">
            <summary>
            Creates a serializable string for generic types that is XML serializable.
            
            Encodes keys as element names and values as simple values with a type
            attribute that contains an XML type name. Complex names encode the type 
            name with type='___namespace.classname' format followed by a standard xml
            serialized format. The latter serialization can be slow so it's not recommended
            to pass complex types if performance is critical.
            </summary>
            <typeparam name="TValue">Must be a reference type. For value types use type object</typeparam>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.PropertyBag`1.GetSchema">
            <summary>
            Not implemented - this means no schema information is passed
            so this won't work with ASMX/WCF services.
            </summary>
            <returns></returns>       
        </member>
        <member name="M:Westwind.Utilities.Dynamic.PropertyBag`1.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the dictionary to XML. Keys are 
            serialized to element names and values as 
            element values. An xml type attribute is embedded
            for each serialized element - a .NET type
            element is embedded for each complex type and
            prefixed with three underscores.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.PropertyBag`1.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads the custom serialized format
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.PropertyBag`1.ToXml">
            <summary>
            Serializes this dictionary to an XML string
            </summary>
            <returns>XML String or Null if it fails</returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.PropertyBag`1.FromXml(System.String)">
            <summary>
            Deserializes from an XML string
            </summary>
            <param name="xml"></param>
            <returns>true or false</returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.PropertyBag`1.CreateFromXml(System.String)">
            <summary>
            Creates an instance of a propertybag from an Xml string
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.PropertyBag.CreateFromXml(System.String)">
            <summary>
            Creates an instance of a propertybag from an Xml string
            </summary>
            <param name="xml">Serialize</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.SerializationUtils.SerializeObject(System.Object,System.String,System.Boolean)">
            <summary>
            Serializes an object instance to a file.
            </summary>
            <param name="instance">the object instance to serialize</param>
            <param name="fileName"></param>
            <param name="binarySerialization">determines whether XML serialization or binary serialization is used</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.SerializationUtils.SerializeObject(System.Object,System.Xml.XmlTextWriter,System.Boolean)">
            <summary>
            Overload that supports passing in an XML TextWriter. 
            </summary>
            <remarks>
            Note the Writer is not closed when serialization is complete 
            so the caller needs to handle closing.
            </remarks>
            <param name="instance">object to serialize</param>
            <param name="writer">XmlTextWriter instance to write output to</param>       
            <param name="throwExceptions">Determines whether false is returned on failure or an exception is thrown</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.SerializationUtils.SerializeObject(System.Object,System.String@)">
            <summary>
            Serializes an object into an XML string variable for easy 'manual' serialization
            </summary>
            <param name="instance">object to serialize</param>
            <param name="xmlResultString">resulting XML string passed as an out parameter</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.SerializationUtils.SerializeObject(System.Object,System.String@,System.Boolean)">
            <summary>
            Serializes an object into a string variable for easy 'manual' serialization
            </summary>
            <param name="instance"></param>
            <param name="xmlResultString">Out parm that holds resulting XML string</param>
            <param name="throwExceptions">If true causes exceptions rather than returning false</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.SerializationUtils.SerializeObject(System.Object,System.Byte[]@,System.Boolean)">
            <summary>
            Serializes an object instance to a file.
            </summary>
            <param name="instance">the object instance to serialize</param>
            <param name="Filename"></param>
            <param name="BinarySerialization">determines whether XML serialization or binary serialization is used</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.SerializationUtils.SerializeObjectToString(System.Object,System.Boolean)">
            <summary>
            Serializes an object to an XML string. Unlike the other SerializeObject overloads
            this methods *returns a string* rather than a bool result!
            </summary>
            <param name="instance"></param>
            <param name="throwExceptions">Determines if a failure throws or returns null</param>
            <returns>
            null on error otherwise the Xml String.         
            </returns>
            <remarks>
            If null is passed in null is also returned so you might want
            to check for null before calling this method.
            </remarks>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.SerializationUtils.DeSerializeObject(System.String,System.Type,System.Boolean)">
            <summary>
            Deserializes an object from file and returns a reference.
            </summary>
            <param name="fileName">name of the file to serialize to</param>
            <param name="objectType">The Type of the object. Use typeof(yourobject class)</param>
            <param name="binarySerialization">determines whether we use Xml or Binary serialization</param>
            <returns>Instance of the deserialized object or null. Must be cast to your object type</returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.SerializationUtils.DeSerializeObject(System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Deserializes an object from file and returns a reference.
            </summary>
            <param name="fileName">name of the file to serialize to</param>
            <param name="objectType">The Type of the object. Use typeof(yourobject class)</param>
            <param name="binarySerialization">determines whether we use Xml or Binary serialization</param>
            <param name="throwExceptions">determines whether failure will throw rather than return null on failure</param>
            <returns>Instance of the deserialized object or null. Must be cast to your object type</returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.SerializationUtils.DeSerializeObject(System.Xml.XmlReader,System.Type)">
            <summary>
            Deserialize an object from an XmlReader object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.SerializationUtils.DeSerializeObject(System.Byte[],System.Type,System.Boolean)">
            <summary>
            Deseializes a binary serialized object from  a byte array
            </summary>
            <param name="buffer"></param>
            <param name="objectType"></param>
            <param name="throwExceptions"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Utilities.Dynamic.SerializationUtils.ObjectToString(System.Object,System.String,Westwind.Utilities.Dynamic.ObjectToStringTypes)">
            <summary>
            Returns a string of all the field value pairs of a given object.
            Works only on non-statics.
            </summary>
            <param name="instanc"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
    </members>
</doc>
