using System;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;
using System.IO;
using System.Xml;

namespace SAHL.FxCop.BuildCheck
{
    /// <summary>
    /// This program analyses FxCop log files and raises an error if there are issues.  This is because currently there is no support in cruise control 
    /// to automatically raise an error if there were FxCop problems.
    /// </summary>
    public class BuildCheck : IDisposable
    {

        private string _fxCopLogFile;
        private StreamWriter _streamWriter = null;

        /// <summary>
        /// Constructor for BuildCheck class.
        /// </summary>
        /// <param name="fxCopLogFile">The path to the FxCop log file to analyse.</param>
        /// <param name="logResults">The path to the file where results should be logged.</param>
        public BuildCheck(string fxCopLogFile, string logResults)
        {
            _fxCopLogFile = fxCopLogFile;
            _streamWriter = new StreamWriter(logResults);

        }

        ~BuildCheck()
        {
            Dispose();
        }

        /// <summary>
        /// Initiates the analysis of the fx cop log file.
        /// </summary>
        public bool Analyse()
        {
            XmlNodeList list = null;
            string result = "";
            bool noIssues = true;

            // begin logging
            _streamWriter.WriteLine(Environment.NewLine + "<SAHL.FxCop.BuildCheck>");
            _streamWriter.WriteLine("\t<fxcop_file>" + _fxCopLogFile + "</fxcop_file>");

            // make sure the FxCop log file exists - if not then just exit here
            if (!File.Exists(_fxCopLogFile))
            {
                result = "File not found.";
            }
            else
            {
                // load up the fxcop log file and check for issues
                XmlDocument doc = new XmlDocument();
                doc.Load(_fxCopLogFile);
                list = doc.GetElementsByTagName("Issue");

                // write a "result" node to the xml file
                if (list.Count == 0)
                    result = "No issues found.";
                else
                    result = "FxCop check FAILED: " + list.Count.ToString() + " issues found - see FxCop log for details.";
            }

            // write the result to the log file
            _streamWriter.WriteLine("\t<result>" + result + "</result>");

            // write out any issues
            if (list != null && list.Count > 0)
            {
                _streamWriter.WriteLine("\t<issues>");
                foreach (XmlNode node in list)
                {
                    _streamWriter.WriteLine("\t\t" + node.OuterXml);
                }
                _streamWriter.WriteLine("\t</issues>");
                noIssues = false;
            }

            _streamWriter.WriteLine("</SAHL.FxCop.BuildCheck>");

            return noIssues;
        }

        /// <summary>
        /// Disposes of the BuildCheck object.
        /// </summary>
        public void Dispose()
        {
            if (_streamWriter != null)
            {
                try
                {
                    _streamWriter.Close();
                    _streamWriter.Dispose();
                }
                catch (Exception)
                {
                }
            }
        }

        /// <summary>
        /// Entry point into the application.
        /// </summary>
        /// <param name="args">
        /// There must always be two arguments:
        /// <list type="number">
        ///     <item>
        ///         <description>The FxCop log file to check.</description>
        ///     </item>
        ///     <item>
        ///         <description>The output log file (generated by BuildCheck).</description>
        ///     </item>
        /// </list>
        /// </param>
        static void Main(string[] args)
        {
            try
            {
                // make sure there are two arguments
                if (args.Length < 2 || String.IsNullOrEmpty(args[0]) || String.IsNullOrEmpty(args[1]))
                    throw new Exception("SAHL.FxCop.BuildCheck requires two arguments (1: The FxCop log file; 2: The output file destination)");

                BuildCheck bc = new BuildCheck(args[0], args[1]);
                bool ok = bc.Analyse();
                bc.Dispose();

                System.Environment.Exit(ok ? 0 : 1);

            }
            catch (Exception ex)
            {
                try
                {
                    EventLog.WriteEntry("SAHL.FxCop.BuildCheck", ex.Message + Environment.NewLine + ex.StackTrace, EventLogEntryType.Error);
                }
                catch (Exception)
                {
                    // exception caught in case there are no permissions to write to the event log
                }
                // rethrow the error so the exception appears in the CruiseControl build log
                throw;
            }
        }
    }
}
