using Machine.Fakes;
using Machine.Specifications;
using SAHL.Common.Collections.Interfaces;
using System;
using WorkflowMaps.ReadvancePayments.Specs;
using X2DomainService.Interface.Common;

namespace WorkflowMaps.Origination.Specs.Workflows.Readvance_Payments.Activities.OnFollowup.OnGetActivityTime
{
    [Subject("Activity => OnFollowup => OnGetActivityTime")] // AutoGenerated
    internal class when_onfollowup : WorkflowSpecReadvancePayments
    {
        private static DateTime result;
        private static ICommon commonClient;
        private static DateTime expectedDateTime;

        private Establish context = () =>
        {
            commonClient = An<ICommon>();
            domainServiceLoader.RegisterMockForType<ICommon>(commonClient);
            expectedDateTime = DateTime.Now.AddDays(31);
            result = DateTime.Now;
            commonClient.WhenToldTo(x => x.GetFollowupTime((IDomainMessageCollection)messages, workflowData.GenericKey)).Return(expectedDateTime);
        };

        private Because of = () =>
        {
            result = workflow.GetActivityTime_OnFollowup(instanceData, workflowData, paramsData, messages);
        };

        private It should_get_followup_date_for_application = () =>
        {
            commonClient.WasToldTo(x => x.GetFollowupTime((IDomainMessageCollection)messages, workflowData.GenericKey));
        };

        private It should_return_followup_date = () =>
        {
            result.ShouldEqual<DateTime>(expectedDateTime);
        };
    }
}