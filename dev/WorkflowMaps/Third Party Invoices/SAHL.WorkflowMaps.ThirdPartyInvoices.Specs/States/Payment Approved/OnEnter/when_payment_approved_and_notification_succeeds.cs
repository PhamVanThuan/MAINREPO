using Machine.Specifications;
using Machine.Fakes;
using SAHL.Core.SystemMessages;
using SAHL.Workflow.Shared;
using SAHL.WorkflowMaps.ThirdPartyInvoices.Specs;
using SAHL.Core.Services;
using SAHL.Core.BusinessModel.Enums;

namespace WorkflowMaps.ThirdPartyInvoices.Specs.States.Payment_Approved.OnEnter
{
    [Subject("State => Payment_Approved => OnEnter")] // AutoGenerated
    internal class when_payment_approved_and_notification_of_assignment_succeeds : WorkflowSpecThirdPartyInvoices
    {
        private static bool result;
        private static IWorkflowAssignment commonAssignment;

        private Establish context = () =>
        {
            messages = SystemMessageCollection.Empty();
            commonAssignment = An<IWorkflowAssignment>();
            commonAssignment.WhenToldTo(x => x.NotifyOfChangeToStaticAssignment(messages, Param.IsAny<GenericKeyType>(), Param.IsAny<int>(), Param.IsAny<long>(), 
                Param.IsAny<IServiceRequestMetadata>(), Param.IsAny<string>())).Return(true);
            domainServiceLoader.RegisterMockForType<IWorkflowAssignment>(commonAssignment);
            result = false;
        };
        Because of = () =>
        {
            result = workflow.OnEnter_Payment_Approved(instanceData, workflowData, paramsData, messages);
        };

        It should_return_true = () =>
        {
            result.ShouldBeTrue();
        };
    }
}