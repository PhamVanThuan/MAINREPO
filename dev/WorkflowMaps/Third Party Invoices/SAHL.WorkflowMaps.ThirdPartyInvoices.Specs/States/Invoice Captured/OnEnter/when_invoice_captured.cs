using Machine.Fakes;
using Machine.Specifications;
using SAHL.Core.SystemMessages;
using SAHL.Services.Interfaces.FinanceDomain.Model;
using SAHL.Workflow.ThirdPartyInvoices;
using System;

namespace SAHL.WorkflowMaps.ThirdPartyInvoices.Specs.States.Invoice_Captured.OnEnter
{
    [Subject("State => Invoice_Captured => OnEnter")] // AutoGenerated
    internal class when_invoice_captured : WorkflowSpecThirdPartyInvoices
    {
        static bool result;
        private static IThirdPartyInvoiceWorkflowProcess process;
        private static GetThirdPartyInvoiceQueryResult dataModel;

        Establish context = () =>
        {
            dataModel = new GetThirdPartyInvoiceQueryResult
            {
                ThirdPartyInvoiceKey = 1234,
                SahlReference = @"SAHL-2015\05\123",
                ThirdPartyId = Guid.NewGuid(),
                ThirdPartyRegisteredName = "Radles Inc",
                AccountKey = 12111,
                InvoiceStatusKey = 2,
                AmountExcludingVAT = 100.00m,
                VATAmount = 14.0M,
                TotalAmountIncludingVAT = 114.0M,
                ReceivedFromEmailAddress = "randles@randlesinc.com",
                InvoiceDate = DateTime.Now,
                InvoiceNumber = "SAHL780",
                ReceivedDate = DateTime.Now
            };
            process = An<IThirdPartyInvoiceWorkflowProcess>();
            process.WhenToldTo(x => x.GetThirdPartyInvoiceByThirdPartyInvoiceKey(Param.IsAny<ISystemMessageCollection>(), Param.IsAny<int>()))
                .Return(dataModel);
            domainServiceLoader.RegisterMockForType<IThirdPartyInvoiceWorkflowProcess>(process);
        };

        Because of = () =>
        {
            result = workflow.OnEnter_Invoice_Captured(instanceData, workflowData, paramsData, messages);
        };

        It should_get_the_invoice_from_the_finance_domain = () =>
        {
            instanceData.Subject.ShouldEqual(string.Format("{0} ({1})", dataModel.ThirdPartyRegisteredName, dataModel.SahlReference));
        };

        It should_return_true = () =>
        {
            result.ShouldBeTrue();
        };
    }
}