using Machine.Fakes;
using Machine.Specifications;
using SAHL.Core.BusinessModel.Enums;
using SAHL.Core.Services;
using SAHL.Core.SystemMessages;
using SAHL.Workflow.Shared;

namespace SAHL.WorkflowMaps.ThirdPartyInvoices.Specs.Activities.Accept_Invoice.OnComplete
{
    [Subject("Activity => Accept_Invoice => OnComplete")] // AutoGenerated
    internal class when_accept_invoice_and_assignment_fails : WorkflowSpecThirdPartyInvoices
    {
        private static bool result;
        private static IWorkflowAssignment commonAssignment;

        private Establish context = () =>
        {
            messages = SystemMessageCollection.Empty();

            commonAssignment = An<IWorkflowAssignment>();
            commonAssignment.WhenToldTo(x => x.AssignCaseToUserInCapability(messages, Param.IsAny<GenericKeyType>(), Param.IsAny<int>(), Param.IsAny<long>(), Param.IsAny<Capability>(),
                Param.IsAny<IServiceRequestMetadata>())).Return(false);
            domainServiceLoader.RegisterMockForType<IWorkflowAssignment>(commonAssignment);
            result = false;
        };

        private Because of = () =>
        {
            string message = string.Empty;
            result = workflow.OnCompleteActivity_Accept_Invoice(instanceData, workflowData, paramsData, messages, ref message);
        };

        private It should_assign_the_case_to_the_user_who_performed_the_activity = () =>
        {
            commonAssignment.WasToldTo(x => x.AssignCaseToUserInCapability(messages, GenericKeyType.ThirdPartyInvoice, workflowData.GenericKey, instanceData.ID, Capability.InvoiceProcessor,
                paramsData.ServiceRequestMetadata));
        };

        private It should_return_false = () =>
        {
            result.ShouldBeFalse();
        };
    }
}