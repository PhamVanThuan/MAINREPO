using Machine.Fakes;
using Machine.Specifications;
using SAHL.Core.Services;
using SAHL.Core.SystemMessages;
using SAHL.Workflow.ThirdPartyInvoices;


namespace SAHL.WorkflowMaps.ThirdPartyInvoices.Specs.Activities.Reverse_Payment_Process.OnComplete
{
    [Subject("Activity => Reverse_Payment_Process => OnComplete")] // AutoGenerated
    public class when_reversing_fails : WorkflowSpecThirdPartyInvoices
    {
        private static bool result;
        private static IThirdPartyInvoiceWorkflowProcess domainProcess;

        private Establish context = () =>
        {
            domainProcess = An<IThirdPartyInvoiceWorkflowProcess>();
            domainProcess.WhenToldTo(x => x.ReturnInvoiceToPaymentQueue(Param.IsAny<ISystemMessageCollection>(), Param.IsAny<int>(), Param.IsAny<IServiceRequestMetadata>()))
            .Return(true);
            domainServiceLoader.RegisterMockForType(domainProcess);
            result = false;
        };

        private Because of = () =>
        {
            string message = string.Empty;
            result = workflow.OnCompleteActivity_Reverse_Payment_Process(instanceData, workflowData, paramsData, messages, ref message);
        };

        private It should_update_the_invoice_using_the_domain_process = () =>
        {
            domainProcess.WasToldTo(x => x.ReturnInvoiceToPaymentQueue(Param.IsAny<ISystemMessageCollection>(), workflowData.ThirdPartyInvoiceKey, Param.IsAny<IServiceRequestMetadata>()));
        };

        private It should_return_true = () =>
        {
            result.ShouldBeTrue();
        };
    }
}
