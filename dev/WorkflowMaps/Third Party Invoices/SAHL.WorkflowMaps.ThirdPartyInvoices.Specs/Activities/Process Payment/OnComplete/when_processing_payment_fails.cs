using Machine.Fakes;
using Machine.Specifications;
using SAHL.Core.Services;
using SAHL.Core.SystemMessages;
using SAHL.Workflow.ThirdPartyInvoices;

namespace SAHL.WorkflowMaps.ThirdPartyInvoices.Specs.Activities.Process_Payment.OnComplete
{
    [Subject("Activity => Process_Payment => OnComplete")] // AutoGenerated
    public class when_processing_payment_fails : WorkflowSpecThirdPartyInvoices
    {
        private static bool result;
        private static IThirdPartyInvoiceWorkflowProcess domainProcess;

        private Establish context = () =>
        {
            domainProcess = An<IThirdPartyInvoiceWorkflowProcess>();
            domainProcess.WhenToldTo(x => x.ProcessInvoicePayment(Param.IsAny<ISystemMessageCollection>(), Param.IsAny<int>(), Param.IsAny<IServiceRequestMetadata>()))
            .Return(false);
            domainServiceLoader.RegisterMockForType(domainProcess);
            result = false;
        };

        private Because of = () =>
        {
            string message = string.Empty;
            result = workflow.OnCompleteActivity_Process_Payment(instanceData, workflowData, paramsData, messages, ref message);
        };

        private It should_update_the_invoice_using_the_domain_process = () =>
        {
            domainProcess.WasToldTo(x => x.ProcessInvoicePayment(Param.IsAny<ISystemMessageCollection>(), workflowData.ThirdPartyInvoiceKey, Param.IsAny<IServiceRequestMetadata>()));
        };

        private It should_return_false = () =>
        {
            result.ShouldBeFalse();
        };
    }
}