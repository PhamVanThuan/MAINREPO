using Machine.Fakes;
using Machine.Specifications;
using SAHL.Core.Data.Models._2AM;
using SAHL.Core.SystemMessages;
using SAHL.Workflow.ThirdPartyInvoices;
using System;
using System.Collections.Generic;
using Third_Party_Invoices;

namespace SAHL.WorkflowMaps.ThirdPartyInvoices.Specs.Activities.Reject_Invoice.OnComplete
{
    [Subject("Activity => Reject_Invoice => OnComplete")] // AutoGenerated
    internal class when_reject_invoice : WorkflowSpecThirdPartyInvoices
    {
        private static bool result;
        private static IThirdPartyInvoiceWorkflowProcess process;
        private static int invoiceKey;

        private Establish context = () =>
        {
            result = false;
            invoiceKey = 123;
            process = An<IThirdPartyInvoiceWorkflowProcess>();
            process.WhenToldTo(x => x.RejectThirdPartyInvoiceByThirdPartyInvoiceKey(Param.IsAny<ISystemMessageCollection>(), Param.IsAny<int>(), Param.IsAny<string>(), 
                paramsData.ServiceRequestMetadata))
                .Return(true);

            domainServiceLoader.RegisterMockForType<IThirdPartyInvoiceWorkflowProcess>(process);

            workflowData.AccountKey = 1408282;
            workflowData.GenericKey = 2;
            workflowData.ThirdPartyInvoiceKey = 123;
            workflowData.ThirdPartyTypeKey = 1;
        };

        private Because of = () =>
        {
            string message = string.Empty;
            result = workflow.OnCompleteActivity_Reject_Invoice(instanceData, workflowData, paramsData, messages, ref message);
        };

        private It should_return_true = () =>
        {
            result.ShouldBeTrue();
        };
    }
}