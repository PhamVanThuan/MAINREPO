<?xml version="1.0" encoding="UTF-8" ?>

<config>

	<luceneMatchVersion>5.0.0</luceneMatchVersion>

  <lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-dataimporthandler-.*\.jar" />
  <lib dir="${solr.install.dir:../../../..}/dist/" regex="sqljdbc4\.jar" />
  
  <lib dir="${solr.install.dir:../../../..}/contrib/extraction/lib" regex=".*\.jar" />
  <lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-cell-\d.*\.jar" />

  <lib dir="${solr.install.dir:../../../..}/contrib/clustering/lib/" regex=".*\.jar" />
  <lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-clustering-\d.*\.jar" />

  <lib dir="${solr.install.dir:../../../..}/contrib/langid/lib/" regex=".*\.jar" />
  <lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-langid-\d.*\.jar" />

  <lib dir="${solr.install.dir:../../../..}/contrib/velocity/lib" regex=".*\.jar" />
  <lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-velocity-\d.*\.jar" />

	<!-- Data Directory -->
	<dataDir>${solr.data.dir:}</dataDir>

	<!-- The DirectoryFactory to use for indexes. -->
	<directoryFactory name="DirectoryFactory"
					  class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}">


		<!-- These will be used if you are using the solr.HdfsDirectoryFactory,
         otherwise they will be ignored. If you don't plan on using hdfs,
         you can safely remove this section. -->
		<!-- The root directory that collection data should be written to. -->
		<str name="solr.hdfs.home">${solr.hdfs.home:}</str>
		<!-- The hadoop configuration files to use for the hdfs client. -->
		<str name="solr.hdfs.confdir">${solr.hdfs.confdir:}</str>
		<!-- Enable/Disable the hdfs cache. -->
		<str name="solr.hdfs.blockcache.enabled">${solr.hdfs.blockcache.enabled:true}</str>
		<!-- Enable/Disable using one global cache for all SolrCores. 
         The settings used will be from the first HdfsDirectoryFactory created. -->
		<str name="solr.hdfs.blockcache.global">${solr.hdfs.blockcache.global:true}</str>

	</directoryFactory>

	<!-- The CodecFactory for defining the format of the inverted index.
    -->
	<codecFactory class="solr.SchemaCodecFactory"/>


	<schemaFactory class="ClassicIndexSchemaFactory"/>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       Index Config - These settings control low-level behavior of indexing
       Most example settings here show the default value, but are commented
       out, to more easily see where customizations have been made.
       
       Note: This replaces <indexDefaults> and <mainIndex> from older versions
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<indexConfig>

		<lockType>${solr.lock.type:native}</lockType>

		<infoStream>true</infoStream>
		
	</indexConfig>


	<jmx />


	<!-- The default high-performance update handler -->
	<updateHandler class="solr.DirectUpdateHandler2">


		<updateLog>
			<str name="dir">${solr.ulog.dir:}</str>
		</updateLog>

		<!-- AutoCommit     -->
		<autoCommit>
			<maxTime>${solr.autoCommit.maxTime:15000}</maxTime>
			<openSearcher>false</openSearcher>
		</autoCommit>

		<!-- softAutoCommit is like autoCommit except it causes a
         'soft' commit which only ensures that changes are visible
         but does not ensure that data is synced to disk.  This is
         faster and more near-realtime friendly than a hard commit.
      -->

		<autoSoftCommit>
			<maxTime>${solr.autoSoftCommit.maxTime:-1}</maxTime>
		</autoSoftCommit>


	</updateHandler>


	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       Query section - these settings control query time things like caches
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<query>
		<!-- Max Boolean Clauses -->
		<maxBooleanClauses>1024</maxBooleanClauses>


		<!-- Solr Internal Query Caches -->

		<!-- Filter Cache -->

		<filterCache class="solr.FastLRUCache"
					 size="512"
					 initialSize="512"
					 autowarmCount="0"/>

		<!-- Query Result Cache -->
		<queryResultCache class="solr.LRUCache"
						 size="512"
						 initialSize="512"
						 autowarmCount="0"/>

		<!-- Document Cache -->

		<documentCache class="solr.LRUCache"
					   size="512"
					   initialSize="512"
					   autowarmCount="0"/>

		<!-- custom cache currently used by block join -->
		<cache name="perSegFilter"
		  class="solr.search.LRUCache"
		  size="10"
		  initialSize="0"
		  autowarmCount="10"
		  regenerator="solr.NoOpRegenerator" />

		<!-- Field Value Cache -->


		<enableLazyFieldLoading>true</enableLazyFieldLoading>

		<!-- Use Filter For Sorted Query -->

		<queryResultWindowSize>20</queryResultWindowSize>

		<!-- Maximum number of documents to cache for any entry in the
        queryResultCache. 
     -->
		<queryResultMaxDocsCached>200</queryResultMaxDocsCached>

		<!-- Query Related Event Listeners  -->

		<listener event="newSearcher" class="solr.QuerySenderListener">
			<arr name="queries">
			</arr>
		</listener>
		<listener event="firstSearcher" class="solr.QuerySenderListener">
			<arr name="queries">
				<lst>
					<str name="q">static firstSearcher warming in solrconfig.xml</str>
				</lst>
			</arr>
		</listener>

		<!-- Use Cold Searcher -->
		<useColdSearcher>false</useColdSearcher>

		<!-- Max Warming Searchers -->
		<maxWarmingSearchers>2</maxWarmingSearchers>

	</query>


	<!-- Request Dispatcher -->


	<requestDispatcher handleSelect="false" >
		<!-- Request Parsing -->

		<requestParsers enableRemoteStreaming="true"
						multipartUploadLimitInKB="2048000"
						formdataUploadLimitInKB="2048"
						addHttpRequestToContext="false"/>

		<!-- HTTP Caching-->
		<httpCaching never304="true" />

	</requestDispatcher>

	<!-- Request Handlers -->

	<requestHandler name="/dataimport" class="solr.DataImportHandler">

		<lst name="defaults">
			<str name="config">data-config.xml</str>
		</lst>
	</requestHandler>

	<!-- SearchHandler -->

	<requestHandler name="/select" class="solr.SearchHandler">

		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<str name="defType">edismax</str>
			<str name="qf">LegalName^10.0 suggest_ngram^9.0 Accounts^9.0 OfferKey^9.0 IndexText^8.0</str>
			<str name="mlt.qf">LegalName^10.0 suggest_ngram^9.0 Accounts^9.0 OfferKey^9.0 IndexText^8.0</str>
			<str name="defType">edismax</str>						
			<int name="rows">10</int>
			<str name="df">IndexText</str>			
		</lst>

	</requestHandler>

	<!-- A request handler that returns indented JSON by default -->
	<requestHandler name="/query" class="solr.SearchHandler">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<str name="wt">json</str>
			<str name="indent">true</str>
			<str name="df">IndexText</str>
			<str name="defType">edismax</str>
			<str name="qf">IndexText^1.0 LegalName^0.9 TradingName^0.9 ThirdPartyType^0.8 ThirdPartySubType^0.5 Contact^0.4</str>
			<str name="mlt.qf">IndexText^1.0 LegalName^0.9 TradingName^0.9 ThirdPartyType^0.8 ThirdPartySubType^0.5 Contact^0.4</str>
			<str name="facet">on</str>
			<str name="hl">on</str>
			<int name="rows">10</int>
		</lst>
	</requestHandler>

	<requestHandler name="/suggest_name" class="solr.SearchHandler">
		<lst name="defaults">

			<str name="wt">json</str>
			<str name="defType">edismax</str>
			<str name="rows">10</str>
			<str name="fl">IndexText</str>
			<str name="df">IndexText</str>
			<str name="qf">suggest^10 suggest_ngram</str>
		</lst>
	</requestHandler>


	<!-- realtime get handler, guaranteed to return the latest stored fields of
       any document, without the need to commit or open a new searcher.  The
       current implementation relies on the updateLog feature being enabled.

       ** WARNING **
       Do NOT disable the realtime get handler at /get if you are using
       SolrCloud otherwise any leader election will cause a full sync in ALL
       replicas for the shard in question. Similarly, a replica recovery will
       also always fetch the complete index from the leader because a partial
       sync will not be possible in the absence of this handler.
  -->
	<requestHandler name="/get" class="solr.RealTimeGetHandler">
		<lst name="defaults">
			<str name="omitHeader">true</str>
			<str name="wt">json</str>
			<str name="indent">true</str>
		</lst>
	</requestHandler>

	<!--
    The export request handler is used to export full sorted result sets.
    Do not change these defaults.
  -->

	<requestHandler name="/export" class="solr.SearchHandler">
		<lst name="invariants">
			<str name="rq">{!xport}</str>
			<str name="wt">xsort</str>
			<str name="distrib">false</str>
		</lst>
		<arr name="components">
			<str>query</str>
		</arr>
	</requestHandler>


	<!-- A Robust Example 
       
       This example SearchHandler declaration shows off usage of the
       SearchHandler with many defaults declared

       Note that multiple instances of the same Request Handler
       (SearchHandler) can be registered multiple times with different
       names (and different init parameters)
    -->
	<requestHandler name="/browse" class="solr.SearchHandler">
		<lst name="defaults">
			<str name="echoParams">explicit</str>

			<!-- VelocityResponseWriter settings -->
			<str name="wt">velocity</str>
			<str name="v.template">browse</str>
			<str name="v.layout">layout</str>
			<str name="title">Solritas</str>

			<!-- Query settings -->
			<str name="defType">edismax</str>
			<str name="qf"></str>
			<str name="df">IndexText</str>
			<str name="mm">100%</str>
			<str name="q.alt">*:*</str>
			<str name="rows">10</str>
			<str name="fl">*,score</str>

			<str name="mlt.qf"></str>
			<str name="mlt.fl">IndexText</str>
			<int name="mlt.count">3</int>

			<!-- Faceting defaults -->
			<str name="facet">on</str>
			<str name="facet.missing">true</str>
			<str name="facet.field">ThirdPartyType</str>
			<str name="facet.field">ThirdPartySubType</str>
			<str name="facet.field">LegalIdentityType</str>
			<str name="facet.field">LegalEntityType</str>
			<str name="facet.query">Attorney</str>
			<str name="facet.query">Valuer</str>
		</lst>
	</requestHandler>
	<!--       <str name="facet.mincount">1</str>
       <str name="facet.pivot">cat,inStock</str>
       <str name="facet.range.other">after</str>
       <str name="facet.range">price</str>
       <int name="f.price.facet.range.start">0</int>
       <int name="f.price.facet.range.end">600</int>
       <int name="f.price.facet.range.gap">50</int>
       <str name="facet.range">popularity</str>
       <int name="f.popularity.facet.range.start">0</int>
       <int name="f.popularity.facet.range.end">10</int>
       <int name="f.popularity.facet.range.gap">3</int>
       <str name="facet.range">manufacturedate_dt</str>
       <str name="f.manufacturedate_dt.facet.range.start">NOW/YEAR-10YEARS</str>
       <str name="f.manufacturedate_dt.facet.range.end">NOW</str>
       <str name="f.manufacturedate_dt.facet.range.gap">+1YEAR</str>
       <str name="f.manufacturedate_dt.facet.range.other">before</str>
       <str name="f.manufacturedate_dt.facet.range.other">after</str>
-->

	<!-- Highlighting defaults 
       <str name="hl">on</str>
       <str name="hl.fl">content features title name</str>
       <str name="hl.preserveMulti">true</str>
       <str name="hl.encoder">html</str>
       <str name="hl.simple.pre"><b></str>
       <str name="hl.simple.post"></b></str>
       <str name="f.title.hl.fragsize">0</str>
       <str name="f.title.hl.alternateField">title</str>
       <str name="f.name.hl.fragsize">0</str>
       <str name="f.name.hl.alternateField">name</str>
       <str name="f.content.hl.snippets">3</str>
       <str name="f.content.hl.fragsize">200</str>
       <str name="f.content.hl.alternateField">content</str>
       <str name="f.content.hl.maxAlternateFieldLength">750</str>
-->

	<!-- Spell checking defaults 
       <str name="spellcheck">on</str>
       <str name="spellcheck.extendedResults">false</str>       
       <str name="spellcheck.count">5</str>
       <str name="spellcheck.alternativeTermCount">2</str>
       <str name="spellcheck.maxResultsForSuggest">5</str>       
       <str name="spellcheck.collate">true</str>
       <str name="spellcheck.collateExtendedResults">true</str>  
       <str name="spellcheck.maxCollationTries">5</str>
       <str name="spellcheck.maxCollations">3</str>           

	   </lst>

     append spellchecking to our list of components 
     <arr name="last-components">
       <str>spellcheck</str>
     </arr>
-->



	<!-- Update Request Handler.-->
	<requestHandler name="/update" class="solr.UpdateRequestHandler">

	</requestHandler>


	<!-- Solr Cell Update Request Handler -->

	<requestHandler name="/update/extract"
					startup="lazy"
					class="solr.extraction.ExtractingRequestHandler" >
		<lst name="defaults">
			<str name="lowernames">true</str>
			<str name="uprefix">ignored_</str>

			<!-- capture link hrefs but ignore div attributes -->
			<str name="captureAttr">true</str>
			<str name="fmap.a">links</str>
			<str name="fmap.div">ignored_</str>
		</lst>
	</requestHandler>


	<!-- Field Analysis Request Handler -->


	<requestHandler name="/analysis/field"
					startup="lazy"
					class="solr.FieldAnalysisRequestHandler">
	</requestHandler>

	<!-- Document Analysis Handler -->

	<requestHandler name="/analysis/document"
					class="solr.DocumentAnalysisRequestHandler"
					startup="lazy" >
	</requestHandler>

	<!-- ping/healthcheck -->
	<requestHandler name="/admin/ping" class="solr.PingRequestHandler">
		<lst name="invariants">
			<str name="q">solrpingquery</str>
		</lst>
		<lst name="defaults">
			<str name="echoParams">all</str>
		</lst>
	</requestHandler>

	<!-- Echo the request contents back to the client -->
	<requestHandler name="/debug/dump" class="solr.DumpRequestHandler" >
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<str name="echoHandler">true</str>
		</lst>
	</requestHandler>

	<!-- Solr Replication-->

	<requestHandler name="/replication" class="solr.ReplicationHandler" >
	</requestHandler>

	<!-- Search Components -->

	<!-- Spell Check -->

	<searchComponent name="spellcheck" class="solr.SpellCheckComponent">

		<str name="queryAnalyzerFieldType">text_general</str>

		<!-- Multiple "Spell Checkers" can be declared and used by this
         component
      -->

		<!-- a spellchecker built from a field of the main index -->
		<lst name="spellchecker">
			<str name="name">default</str>
			<str name="field">IndexText</str>
			<str name="classname">solr.DirectSolrSpellChecker</str>
			<!-- the spellcheck distance measure used, the default is the internal levenshtein -->
			<str name="distanceMeasure">internal</str>
			<!-- minimum accuracy needed to be considered a valid spellcheck suggestion -->
			<float name="accuracy">0.5</float>
			<!-- the maximum #edits we consider when enumerating terms: can be 1 or 2 -->
			<int name="maxEdits">2</int>
			<!-- the minimum shared prefix when enumerating terms -->
			<int name="minPrefix">1</int>
			<!-- maximum number of inspections per result. -->
			<int name="maxInspections">5</int>
			<!-- minimum length of a query term to be considered for correction -->
			<int name="minQueryLength">4</int>
			<!-- maximum threshold of documents a query term can appear to be considered for correction -->
			<float name="maxQueryFrequency">0.01</float>
			<!-- uncomment this to require suggestions to occur in 1% of the documents
      	<float name="thresholdTokenFrequency">.01</float>
      -->
		</lst>

		<!-- a spellchecker that can break or combine words.  See "/spell" handler below for usage -->
		<lst name="spellchecker">
			<str name="name">wordbreak</str>
			<str name="classname">solr.WordBreakSolrSpellChecker</str>
			<str name="field">name</str>
			<str name="combineWords">true</str>
			<str name="breakWords">true</str>
			<int name="maxChanges">10</int>
		</lst>

	</searchComponent>

	<!-- A request handler for demonstrating the spellcheck component.  -->

	<requestHandler name="/spell" class="solr.SearchHandler" startup="lazy">
		<lst name="defaults">
			<str name="df">IndexText</str>
			<!-- Solr will use suggestions from both the 'default' spellchecker
           and from the 'wordbreak' spellchecker and combine them.
           collations (re-written queries) can include a combination of
           corrections from both spellcheckers -->
			<str name="spellcheck.dictionary">default</str>
			<str name="spellcheck.dictionary">wordbreak</str>
			<str name="spellcheck">on</str>
			<str name="spellcheck.extendedResults">true</str>
			<str name="spellcheck.count">10</str>
			<str name="spellcheck.alternativeTermCount">5</str>
			<str name="spellcheck.maxResultsForSuggest">5</str>
			<str name="spellcheck.collate">true</str>
			<str name="spellcheck.collateExtendedResults">true</str>
			<str name="spellcheck.maxCollationTries">10</str>
			<str name="spellcheck.maxCollations">5</str>
		</lst>
		<arr name="last-components">
			<str>spellcheck</str>
		</arr>
	</requestHandler>

	<searchComponent name="suggest" class="solr.SuggestComponent">
		<lst name="suggester">
			<str name="name">mySuggester</str>
			<str name="lookupImpl">FuzzyLookupFactory</str>
			<!-- org.apache.solr.spelling.suggest.fst -->
			<str name="dictionaryImpl">DocumentDictionaryFactory</str>
			<!-- org.apache.solr.spelling.suggest.HighFrequencyDictionaryFactory -->
			<str name="field">cat</str>
			<str name="weightField">price</str>
			<str name="suggestAnalyzerFieldType">string</str>
		</lst>
	</searchComponent>

	<requestHandler name="/suggest" class="solr.SearchHandler" startup="lazy">
		<lst name="defaults">
			<str name="suggest">true</str>
			<str name="suggest.count">10</str>
		</lst>
		<arr name="components">
			<str>suggest</str>
		</arr>
	</requestHandler>
	<!-- Term Vector Component

       http://wiki.apache.org/solr/TermVectorComponent
    -->
	<searchComponent name="tvComponent" class="solr.TermVectorComponent"/>

	<!-- A request handler for demonstrating the term vector component

       This is purely as an example.

       In reality you will likely want to add the component to your 
       already specified request handlers. 
    -->
	<requestHandler name="/tvrh" class="solr.SearchHandler" startup="lazy">
		<lst name="defaults">
			<str name="df">IndexText</str>
			<bool name="tv">true</bool>
		</lst>
		<arr name="last-components">
			<str>tvComponent</str>
		</arr>
	</requestHandler>

	<!-- Clustering Component

       You'll need to set the solr.clustering.enabled system property
       when running solr to run with clustering enabled:

            java -Dsolr.clustering.enabled=true -jar start.jar

       http://wiki.apache.org/solr/ClusteringComponent
       http://carrot2.github.io/solr-integration-strategies/
    -->
	<searchComponent name="clustering"
					 enable="${solr.clustering.enabled:false}"
					 class="solr.clustering.ClusteringComponent" >
		<lst name="engine">
			<str name="name">lingo</str>

			<!-- Class name of a clustering algorithm compatible with the Carrot2 framework. -->

			<str name="carrot.algorithm">org.carrot2.clustering.lingo.LingoClusteringAlgorithm</str>

			<!-- Override location of the clustering algorithm's resources  -->

			<str name="carrot.resourcesDir">clustering/carrot2</str>
		</lst>

		<!-- An example definition for the STC clustering algorithm. -->
		<lst name="engine">
			<str name="name">stc</str>
			<str name="carrot.algorithm">org.carrot2.clustering.stc.STCClusteringAlgorithm</str>
		</lst>

		<!-- An example definition for the bisecting kmeans clustering algorithm. -->
		<lst name="engine">
			<str name="name">kmeans</str>
			<str name="carrot.algorithm">org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm</str>
		</lst>
	</searchComponent>


	<!-- Terms Component

       http://wiki.apache.org/solr/TermsComponent

       A component to return terms and document frequency of those
       terms
    -->
	<searchComponent name="terms" class="solr.TermsComponent"/>

	<!-- A request handler for demonstrating the terms component -->
	<requestHandler name="/terms" class="solr.SearchHandler" startup="lazy">
		<lst name="defaults">
			<bool name="terms">true</bool>
			<bool name="distrib">false</bool>
		</lst>
		<arr name="components">
			<str>terms</str>
		</arr>
	</requestHandler>


	<!-- Query Elevation Component

       http://wiki.apache.org/solr/QueryElevationComponent

       a search component that enables you to configure the top
       results for a given query regardless of the normal lucene
       scoring.
    -->
	<searchComponent name="elevator" class="solr.QueryElevationComponent" >
		<!-- pick a fieldType to analyze queries -->
		<str name="queryFieldType">string</str>
		<str name="config-file">elevate.xml</str>
	</searchComponent>

	<!-- A request handler for demonstrating the elevator component -->
	<requestHandler name="/elevate" class="solr.SearchHandler" startup="lazy">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<str name="df">IndexText</str>
		</lst>
		<arr name="last-components">
			<str>elevator</str>
		</arr>
	</requestHandler>

	<!-- Highlighting Component

       http://wiki.apache.org/solr/HighlightingParameters
    -->
	<searchComponent class="solr.HighlightComponent" name="highlight">
		<highlighting>
			<!-- Configure the standard fragmenter -->
			<!-- This could most likely be commented out in the "default" case -->
			<fragmenter name="gap"
						default="true"
						class="solr.highlight.GapFragmenter">
				<lst name="defaults">
					<int name="hl.fragsize">100</int>
				</lst>
			</fragmenter>

			<!-- A regular-expression-based fragmenter 
           (for sentence extraction) 
        -->
			<fragmenter name="regex"
						class="solr.highlight.RegexFragmenter">
				<lst name="defaults">
					<!-- slightly smaller fragsizes work better because of slop -->
					<int name="hl.fragsize">70</int>
					<!-- allow 50% slop on fragment sizes -->
					<float name="hl.regex.slop">0.5</float>
					<!-- a basic sentence pattern -->
					<str name="hl.regex.pattern">[-\w ,/\n\"']{20,200}</str>
				</lst>
			</fragmenter>

			<!-- Configure the standard formatter -->
			<formatter name="html"
					   default="true"
					   class="solr.highlight.HtmlFormatter">
				<lst name="defaults">
					<str name="hl.simple.pre"><![CDATA[<em>]]></str>
					<str name="hl.simple.post"><![CDATA[</em>]]></str>
				</lst>
			</formatter>

			<!-- Configure the standard encoder -->
			<encoder name="html"
					 class="solr.highlight.HtmlEncoder" />

			<!-- Configure the standard fragListBuilder -->
			<fragListBuilder name="simple"
							 class="solr.highlight.SimpleFragListBuilder"/>

			<!-- Configure the single fragListBuilder -->
			<fragListBuilder name="single"
							 class="solr.highlight.SingleFragListBuilder"/>

			<!-- Configure the weighted fragListBuilder -->
			<fragListBuilder name="weighted"
							 default="true"
							 class="solr.highlight.WeightedFragListBuilder"/>

			<!-- default tag FragmentsBuilder -->
			<fragmentsBuilder name="default"
							  default="true"
							  class="solr.highlight.ScoreOrderFragmentsBuilder">
				<!-- 
        <lst name="defaults">
          <str name="hl.multiValuedSeparatorChar">/</str>
        </lst>
        -->
			</fragmentsBuilder>

			<!-- multi-colored tag FragmentsBuilder -->
			<fragmentsBuilder name="colored"
							  class="solr.highlight.ScoreOrderFragmentsBuilder">
				<lst name="defaults">
					<str name="hl.tag.pre">
						<![CDATA[
               <b style="background:yellow">,<b style="background:lawgreen">,
               <b style="background:aquamarine">,<b style="background:magenta">,
               <b style="background:palegreen">,<b style="background:coral">,
               <b style="background:wheat">,<b style="background:khaki">,
               <b style="background:lime">,<b style="background:deepskyblue">]]>
					</str>
					<str name="hl.tag.post"><![CDATA[</b>]]></str>
				</lst>
			</fragmentsBuilder>

			<boundaryScanner name="default"
							 default="true"
							 class="solr.highlight.SimpleBoundaryScanner">
				<lst name="defaults">
					<str name="hl.bs.maxScan">10</str>
					<str name="hl.bs.chars">
						.,!?

					</str>
				</lst>
			</boundaryScanner>

			<boundaryScanner name="breakIterator"
							 class="solr.highlight.BreakIteratorBoundaryScanner">
				<lst name="defaults">
					<!-- type should be one of CHARACTER, WORD(default), LINE and SENTENCE -->
					<str name="hl.bs.type">WORD</str>
					<!-- language and country are used when constructing Locale object.  -->
					<!-- And the Locale object will be used when getting instance of BreakIterator -->
					<str name="hl.bs.language">en</str>
					<str name="hl.bs.country">US</str>
				</lst>
			</boundaryScanner>
		</highlighting>
	</searchComponent>


	<!-- Response Writers -->

	<queryResponseWriter name="json" class="solr.JSONResponseWriter">
		<!-- For the purposes of the tutorial, JSON responses are written as
      plain text so that they are easy to read in *any* browser.
      If you expect a MIME type of "application/json" just remove this override.
     -->
		<str name="content-type">text/plain; charset=UTF-8</str>
	</queryResponseWriter>

	<!--
     Custom response writers can be declared as needed...
    -->
	<queryResponseWriter name="velocity" class="solr.VelocityResponseWriter" startup="lazy"/>


	<!-- XSLT response writer transforms the XML output by any xslt file found
       in Solr's conf/xslt directory.  Changes to xslt files are checked for
       every xsltCacheLifetimeSeconds.  
    -->
	<queryResponseWriter name="xslt" class="solr.XSLTResponseWriter">
		<int name="xsltCacheLifetimeSeconds">5</int>
	</queryResponseWriter>

	<admin>
		<defaultQuery>*:*</defaultQuery>
	</admin>

</config>