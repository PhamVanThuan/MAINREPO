//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SAHL.Config.Services.DomainProcessManager.Client.DomainProcessManagerWcfService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DomainProcessManagerWcfService.IDomainProcessManagerService")]
    public interface IDomainProcessManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDomainProcessManagerService/StartDomainProcess", ReplyAction="http://tempuri.org/IDomainProcessManagerService/StartDomainProcessResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SAHL.Services.Interfaces.DomainProcessManager.StartDomainProcessResponse))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(SAHL.Services.Interfaces.DomainProcessManager.StartDomainProcessCommand))]
        SAHL.Services.Interfaces.DomainProcessManager.StartDomainProcessResponse StartDomainProcess(SAHL.Services.Interfaces.DomainProcessManager.StartDomainProcessCommand command);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDomainProcessManagerService/StartDomainProcess", ReplyAction="http://tempuri.org/IDomainProcessManagerService/StartDomainProcessResponse")]
        System.Threading.Tasks.Task<SAHL.Services.Interfaces.DomainProcessManager.StartDomainProcessResponse> StartDomainProcessAsync(SAHL.Services.Interfaces.DomainProcessManager.StartDomainProcessCommand command);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDomainProcessManagerServiceChannel : SAHL.Config.Services.DomainProcessManager.Client.DomainProcessManagerWcfService.IDomainProcessManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DomainProcessManagerServiceClient : System.ServiceModel.ClientBase<SAHL.Config.Services.DomainProcessManager.Client.DomainProcessManagerWcfService.IDomainProcessManagerService>, SAHL.Config.Services.DomainProcessManager.Client.DomainProcessManagerWcfService.IDomainProcessManagerService {
        
        public DomainProcessManagerServiceClient() {
        }
        
        public DomainProcessManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DomainProcessManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DomainProcessManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DomainProcessManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SAHL.Services.Interfaces.DomainProcessManager.StartDomainProcessResponse StartDomainProcess(SAHL.Services.Interfaces.DomainProcessManager.StartDomainProcessCommand command) {
            return base.Channel.StartDomainProcess(command);
        }
        
        public System.Threading.Tasks.Task<SAHL.Services.Interfaces.DomainProcessManager.StartDomainProcessResponse> StartDomainProcessAsync(SAHL.Services.Interfaces.DomainProcessManager.StartDomainProcessCommand command) {
            return base.Channel.StartDomainProcessAsync(command);
        }
    }
}
