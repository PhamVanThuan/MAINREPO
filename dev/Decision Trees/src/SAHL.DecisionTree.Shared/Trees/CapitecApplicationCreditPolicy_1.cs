
using Microsoft.Scripting.Hosting;
using SAHL.Core.SystemMessages;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Linq;
using System;
using System.Reflection;
using System.Dynamic;
using SAHL.DecisionTree.Shared.Interfaces;
using SAHL.DecisionTree.Shared.Core;
using SAHL.DecisionTree.Shared.Helpers;

namespace SAHL.DecisionTree.Shared.Trees
{
    public class CapitecApplicationCreditPolicy_1 : IDecisionTree
    {
        private int currentNodeId;
        private bool currentResult;
        private ScriptScope scope;
        private bool nodeExecutionResultedInError;
        private dynamic variablesCollection;
        private ISystemMessageCollection systemMessageCollection;

        private Dictionary<string, ISystemMessageCollection> SubtreeMessagesDictionary { get; set; }
        private List<string> SubtreeMessagesToClear { get; set; }
        
        public List<Link> NodeLinks {get; private set;}
        public Dictionary<int, Node> Nodes {get; private set;}
        public QueryGlobalsVersion GlobalsVersion { get; protected set; }

        public CapitecApplicationCreditPolicy_1(ISystemMessageCollection messages)
        {
            this.NodeLinks = new List<Link>() { new Link(0,1,-2,LinkType.Standard), new Link(1,-2,-3,LinkType.DecisionYes), new Link(2,-3,-33,LinkType.DecisionNo), new Link(3,-9,-10,LinkType.DecisionYes), new Link(4,-6,-23,LinkType.DecisionYes), new Link(5,-6,-13,LinkType.DecisionNo), new Link(6,-12,-14,LinkType.DecisionYes), new Link(7,-14,-21,LinkType.DecisionYes), new Link(8,-14,-15,LinkType.DecisionNo), new Link(9,-12,-7,LinkType.DecisionNo), new Link(10,-11,-16,LinkType.DecisionYes), new Link(11,-10,-21,LinkType.DecisionYes), new Link(12,-10,-18,LinkType.DecisionNo), new Link(13,-16,-21,LinkType.DecisionYes), new Link(14,-16,-19,LinkType.DecisionNo), new Link(15,-1,-20,LinkType.Standard), new Link(16,-21,-25,LinkType.Standard), new Link(17,-23,-24,LinkType.Standard), new Link(18,-7,-8,LinkType.DecisionYes), new Link(19,-7,-11,LinkType.DecisionNo), new Link(20,-11,-9,LinkType.DecisionNo), new Link(21,-9,-27,LinkType.DecisionNo), new Link(22,-27,-28,LinkType.DecisionNo), new Link(23,-28,-31,LinkType.DecisionYes), new Link(24,-27,-29,LinkType.DecisionYes), new Link(25,-29,-23,LinkType.DecisionYes), new Link(26,-29,-30,LinkType.DecisionNo), new Link(27,-31,-32,LinkType.DecisionNo), new Link(28,-28,-1,LinkType.DecisionNo), new Link(29,-31,-23,LinkType.DecisionYes), new Link(30,-5,-6,LinkType.DecisionYes), new Link(31,-5,-12,LinkType.DecisionNo), new Link(32,-2,-3,LinkType.DecisionNo), new Link(33,-3,-33,LinkType.DecisionYes), new Link(34,-33,-35,LinkType.DecisionYes), new Link(35,-33,-34,LinkType.DecisionNo), new Link(36,-34,-37,LinkType.DecisionYes), new Link(37,-35,-36,LinkType.DecisionNo), new Link(38,-37,-38,LinkType.DecisionNo), new Link(39,-34,-5,LinkType.DecisionNo), new Link(40,-35,-40,LinkType.DecisionYes), new Link(41,-37,-39,LinkType.DecisionYes), new Link(42,-39,-42,LinkType.Standard), new Link(43,-40,-41,LinkType.Standard)};
            this.Nodes = new Dictionary<int, Node>() {{1, new Node(1,"Start",NodeType.Start,@"")},{-2, new Node(-2,"Youngest Applicant age >= 18 years <= 65",NodeType.Decision,@"Variables::outputs.EligibleBorrowerAge = true_newline__newline_if (Variables::inputs.YoungestApplicantAgeinYears <= 65 && Variables::inputs.YoungestApplicantAgeinYears >=18) then_newline_  Variables::outputs.NodeResult = true_newline_else_newline_  Messages.AddWarning(Messages::capitec::credit.ApplicantAgeLimit)  _newline_  Variables::outputs.EligibleEmpirica = false_newline_  Variables::outputs.NodeResult = false_newline_end")},{-3, new Node(-3,"Eldest Applicant age >= 18 years <= 65",NodeType.Decision,@"if (Variables::inputs.EldestApplicantAgeinYears <= 65 && Variables::inputs.EldestApplicantAgeinYears >= 18) then_newline_  Variables::outputs.NodeResult = true_newline_else_newline_  Messages.AddWarning(Messages::capitec::credit.ApplicantAgeLimit)_newline_  Variables::outputs.EligibleBorrowerAge = false_newline_  Variables::outputs.EligibleEmpirica = false_newline_  Variables::outputs.NodeResult = false_newline_end_newline_")},{-5, new Node(-5,"First Applicant Income >= 75% of Household Income",NodeType.Decision,@"if Variables::inputs.FirstIncomeContributorApplicantIncome >= (0.75 * Variables::inputs.HouseholdIncome) then   _newline_  Variables::outputs.NodeResult = true_newline_else_newline_  Variables::outputs.NodeResult = false_newline_end")},{-6, new Node(-6,"FirstIncomeContributorApplicantEmpirica >= 575",NodeType.Decision,@"if Variables::inputs.FirstIncomeContributorApplicantEmpirica >= 575 then_newline_  Variables::outputs.NodeResult = true_newline_else_newline_  Variables::outputs.ApplicationEmpirica = -999_newline_  Variables::outputs.EligibleEmpirica = false_newline_  Variables::outputs.NodeResult = false_newline_end")},{-7, new Node(-7,"First Applicant Empirica or Second Applicant Applicant Empirica < 561",NodeType.Decision,@"if Variables::inputs.FirstIncomeContributorApplicantEmpirica < 561 or Variables::inputs.SecondIncomeContributorApplicantEmpirica < 561 then _newline_  Variables::outputs.ApplicationEmpirica = -999_newline_  Variables::outputs.EligibleEmpirica = false_newline_  Variables::outputs.NodeResult = true_newline_else_newline_  Variables::outputs.NodeResult = false_newline_end")},{-8, new Node(-8,"End",NodeType.End,@"")},{-9, new Node(-9,"First Applicant Empirica between 568 and 574 inclusive",NodeType.Decision,@"if (Variables::inputs.FirstIncomeContributorApplicantEmpirica >= 568 && Variables::inputs.FirstIncomeContributorApplicantEmpirica <= 574) then_newline_  Variables::outputs.NodeResult = true_newline_else_newline_  Variables::outputs.NodeResult = false_newline_end")},{-10, new Node(-10,"Second Applicant Empirica > 594",NodeType.Decision,@"if Variables::inputs.SecondIncomeContributorApplicantEmpirica > 594 then_newline_  Variables::outputs.NodeResult = true_newline_else_newline_  Variables::outputs.ApplicationEmpirica = -999_newline_  Variables::outputs.EligibleEmpirica = false_newline_  Variables::outputs.NodeResult = false_newline_end")},{-11, new Node(-11,"First Applicant Empirica between 561and 566 inclusive",NodeType.Decision,@"if (Variables::inputs.FirstIncomeContributorApplicantEmpirica >= 561 && Variables::inputs.FirstIncomeContributorApplicantEmpirica <= 567) then_newline_  Variables::outputs.NodeResult = true_newline_else_newline_  Variables::outputs.NodeResult = false_newline_end")},{-12, new Node(-12,"Second Applicant Income >= 75% of Household Income",NodeType.Decision,@"if Variables::inputs.SecondIncomeContributorApplicantIncome >= (0.75 * Variables::inputs.HouseholdIncome) then   _newline_  Variables::outputs.NodeResult = true_newline_else_newline_  Variables::outputs.NodeResult = false_newline_end")},{-13, new Node(-13,"End",NodeType.End,@"")},{-14, new Node(-14,"SecondIncomeContributorApplicantEmpirica >= 575",NodeType.Decision,@"if Variables::inputs.SecondIncomeContributorApplicantEmpirica >= 575 then_newline_  Variables::outputs.NodeResult = true_newline_else_newline_  Variables::outputs.ApplicationEmpirica = -999_newline_  Variables::outputs.EligibleEmpirica = false_newline_  Variables::outputs.NodeResult = false_newline_end")},{-15, new Node(-15,"End",NodeType.End,@"")},{-16, new Node(-16,"Second Applicant Empirica > 649",NodeType.Decision,@"if Variables::inputs.SecondIncomeContributorApplicantEmpirica > 649 then_newline_  Variables::outputs.NodeResult = true_newline_else_newline_  Variables::outputs.ApplicationEmpirica = -999_newline_  Variables::outputs.EligibleEmpirica = false_newline_  Variables::outputs.NodeResult = false_newline_end")},{-18, new Node(-18,"End",NodeType.End,@"")},{-19, new Node(-19,"End",NodeType.End,@"")},{-20, new Node(-20,"End",NodeType.End,@"")},{-1, new Node(-1,"Highest of two applicant Empirica as Application Empirica",NodeType.Process,@"if Variables::inputs.FirstIncomeContributorApplicantEmpirica >= Variables::inputs.SecondIncomeContributorApplicantEmpirica then_newline_   Variables::outputs.ApplicationEmpirica = Variables::inputs.FirstIncomeContributorApplicantEmpirica _newline_else_newline_   Variables::outputs.ApplicationEmpirica = Variables::inputs.SecondIncomeContributorApplicantEmpirica _newline_end _newline_  _newline_Variables::outputs.EligibleEmpirica = true")},{-21, new Node(-21,"Second Applicants Empirica is Application Empirica",NodeType.Process,@"Variables::outputs.ApplicationEmpirica = Variables::inputs.SecondIncomeContributorApplicantEmpirica_newline_Variables::outputs.EligibleEmpirica = true")},{-23, new Node(-23,"First Applicants Empirica is Application Empirica",NodeType.Process,@"Variables::outputs.ApplicationEmpirica = Variables::inputs.FirstIncomeContributorApplicantEmpirica_newline_Variables::outputs.EligibleEmpirica = true ")},{-25, new Node(-25,"End",NodeType.End,@"")},{-24, new Node(-24,"End",NodeType.End,@"")},{-27, new Node(-27,"Second Applicant Empirica between 561and 567 inclusive",NodeType.Decision,@"if (Variables::inputs.SecondIncomeContributorApplicantEmpirica >= 561 && Variables::inputs.SecondIncomeContributorApplicantEmpirica <= 567) then_newline_  Variables::outputs.NodeResult = true_newline_else_newline_  Variables::outputs.NodeResult = false_newline_end")},{-28, new Node(-28,"Second Applicant Empirica between 568 and 574 inclusive",NodeType.Decision,@"if (Variables::inputs.SecondIncomeContributorApplicantEmpirica >= 568 && Variables::inputs.SecondIncomeContributorApplicantEmpirica <= 574) then_newline_  Variables::outputs.NodeResult = true_newline_else_newline_  Variables::outputs.NodeResult = false_newline_end")},{-29, new Node(-29,"First Applicant Empirica > 649",NodeType.Decision,@"if Variables::inputs.FirstIncomeContributorApplicantEmpirica > 649 then_newline_  Variables::outputs.NodeResult = true_newline_else_newline_  Variables::outputs.ApplicationEmpirica = -999_newline_  Variables::outputs.EligibleEmpirica = false_newline_  Variables::outputs.NodeResult = false_newline_end")},{-30, new Node(-30,"End",NodeType.End,@"")},{-31, new Node(-31,"First Applicant Empirica > 594",NodeType.Decision,@"if Variables::inputs.FirstIncomeContributorApplicantEmpirica > 594 then_newline_  Variables::outputs.NodeResult = true_newline_else_newline_  Variables::outputs.ApplicationEmpirica = -999_newline_  Variables::outputs.EligibleEmpirica = false_newline_  Variables::outputs.NodeResult = false_newline_end")},{-32, new Node(-32,"End",NodeType.End,@"")},{-33, new Node(-33,"First Applicant Empirica = -999",NodeType.Decision,@"if Variables::inputs.FirstIncomeContributorApplicantEmpirica == -999  then_newline_  Variables::outputs.NodeResult = true_newline_else_newline_ Variables::outputs.NodeResult = false_newline_end")},{-34, new Node(-34,"Second Applicant Empirica = -999",NodeType.Decision,@"if Variables::inputs.SecondIncomeContributorApplicantEmpirica == -999 then_newline_  Variables::outputs.NodeResult = true_newline_else_newline_ Variables::outputs.NodeResult = false_newline_end")},{-35, new Node(-35,"SecondIncomeContributorApplicantEmpirica >= 575",NodeType.Decision,@"if Variables::inputs.SecondIncomeContributorApplicantEmpirica >= 575 then_newline_  Variables::outputs.NodeResult = true_newline_else_newline_  Variables::outputs.ApplicationEmpirica = -999_newline_  Variables::outputs.EligibleEmpirica = false_newline_  Variables::outputs.NodeResult = false_newline_end")},{-36, new Node(-36,"End",NodeType.End,@"")},{-37, new Node(-37,"FirstIncomeContributorApplicantEmpirica >= 575",NodeType.Decision,@"if Variables::inputs.FirstIncomeContributorApplicantEmpirica >= 575 then_newline_  Variables::outputs.NodeResult = true_newline_else_newline_  Variables::outputs.ApplicationEmpirica = -999_newline_  Variables::outputs.EligibleEmpirica = false_newline_  Variables::outputs.NodeResult = false_newline_end")},{-38, new Node(-38,"End",NodeType.End,@"")},{-39, new Node(-39,"First Applicants Empirica is Application Empirica",NodeType.Process,@"Variables::outputs.ApplicationEmpirica = Variables::inputs.FirstIncomeContributorApplicantEmpirica_newline_Variables::outputs.EligibleEmpirica = true ")},{-40, new Node(-40,"Second Applicants Empirica is Application Empirica",NodeType.Process,@"Variables::outputs.ApplicationEmpirica = Variables::inputs.SecondIncomeContributorApplicantEmpirica_newline_Variables::outputs.EligibleEmpirica = true")},{-41, new Node(-41,"End",NodeType.End,@"")},{-42, new Node(-42,"End",NodeType.End,@"")}};
            this.systemMessageCollection = messages;
            SubtreeMessagesDictionary = new Dictionary<string, ISystemMessageCollection>();
            SubtreeMessagesToClear = new List<string>();
        }		
    }
}