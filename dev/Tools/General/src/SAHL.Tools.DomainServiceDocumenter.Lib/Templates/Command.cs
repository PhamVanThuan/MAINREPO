// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SAHL.Tools.DomainServiceDocumenter.Lib.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class Command : CommandBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n<html>\r\n\t<head>\r\n\t\t<title>");
            
            #line 9 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Service.ClearName));
            
            #line default
            #line hidden
            this.Write(@"</title>
		<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
		<link href=""../css/bootstrap.min.css"" rel=""stylesheet"" media=""screen"">
		<style>
			.validation {
				color:orange;
			}
			.validation-message {
				color:red;
			}
			ul li a{color:#ff6600}
			ul li a:hover{color:#e65c00}
			.nav-list>.active>a,.nav-list>.active>a:hover,.nav-list>.active>a:focus{background-color:#ff6600}
		</style>
	</head>
	<body>
	<div class=""container-fluid"">
		<div class=""row"">
			<div class=""span12"">
				<h1>");
            
            #line 28 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Service.ClearName));
            
            #line default
            #line hidden
            this.Write(@" Domain Service</h1>
			</div>
		</div>
		<div class=""row-fluid"">
			<div class=""span3"">
				<ul class=""nav nav-list well"">
				  <li class=""nav-header"">Documentation</li>
				  <li><a href=""../index.html"">Home</a></li>
				  <li><a href=""../commands.html"""">Commands</a></li>
					<ul class=""nav nav-list"">
				");
            
            #line 38 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
 foreach(var cmd in CommandModels.OrderBy(x=>x.Name))
{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t<li ");
            
            #line 40 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
if (cmd.Name == CommandModel.Name){
            
            #line default
            #line hidden
            this.Write("class=\"active\"");
            
            #line 40 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
}
            
            #line default
            #line hidden
            this.Write(">\r\n\t\t\t\t\t\t\t<a href=\"../commands/");
            
            #line 41 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cmd.Name.ToLower()));
            
            #line default
            #line hidden
            this.Write(".html\">");
            
            #line 41 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(cmd.ClearName));
            
            #line default
            #line hidden
            this.Write("</a>\r\n\t\t\t\t\t\t</li>\r\n");
            
            #line 43 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
}
            
            #line default
            #line hidden
            this.Write(@"					</ul>
				  
				  <li><a href=""../events.html"">Events</a></li>
				  <li><a href=""../models.html"">Models</a></li>
				  <li><a href=""../queries.html"">Queries</a></li>
				  <li><a href=""../rules.html"""">Rules</a></li>
				  <li><a href=""../domainchecks.html"""">Domain Checks</a></li>
				  <li><a href=""../enumerators.html"""">Enumerators</a></li>
				</ul>
			</div>
			<div class=""span9"">
				<h2>");
            
            #line 55 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CommandModel.ClearName));
            
            #line default
            #line hidden
            this.Write("</h2>\r\n\r\n\t\t\t\t<h3>Properties</h3>\r\n\t\t\t\t");
            
            #line 58 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
if(CommandModel.Properties.Count() > 0)
				{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<table class=\"table table-striped\">\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>N" +
                    "ame</th>\r\n\t\t\t\t\t\t\t<th>Type</th>\r\n\t\t\t\t\t\t\t<th>Validations</th>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<" +
                    "/thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t");
            
            #line 69 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
 foreach(var prop in CommandModel.Properties.OrderBy(x=>x.Name))
				{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<td>");
            
            #line 72 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.ClearName));
            
            #line default
            #line hidden
            this.Write("</td>\r\n\t\t\t\t");
            
            #line 73 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
if(prop.IsSAHLModel)
				{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t<td><a href=\"../models/");
            
            #line 75 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.Type));
            
            #line default
            #line hidden
            this.Write(".html\">");
            
            #line 75 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.ClearType));
            
            #line default
            #line hidden
            this.Write("</td>\r\n\t\t\t\t");
            
            #line 76 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
} 
				else if(prop.IsCollectionSAHLModel)
				{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t<td><a href=\"../models/");
            
            #line 79 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.CollectionPropertyType));
            
            #line default
            #line hidden
            this.Write(".html\">");
            
            #line 79 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.Type));
            
            #line default
            #line hidden
            this.Write("</td>\r\n\t\t\t\t");
            
            #line 80 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
}
				else if(prop.IsSAHLEnum)
				{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t<td><a href=\"../enumerators/");
            
            #line 83 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.Type));
            
            #line default
            #line hidden
            this.Write(".html\">");
            
            #line 83 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.ClearType));
            
            #line default
            #line hidden
            this.Write("</td>\r\n\t\t\t\t");
            
            #line 84 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
} else {
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t<td>");
            
            #line 85 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(prop.Type));
            
            #line default
            #line hidden
            this.Write("</td>\r\n\t\t\t\t");
            
            #line 86 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t");
            
            #line 89 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
 foreach(var validation in prop.Validations.OrderBy(x=>x.Name))
				{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t\t\t<span class=\"validation\">");
            
            #line 92 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(validation.Name));
            
            #line default
            #line hidden
            this.Write("</span>\r\n\t\t\t\t\t\t\t\t\t\t<span class=\"validation-message\">");
            
            #line 93 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(validation.ErrorMessage));
            
            #line default
            #line hidden
            this.Write("</span>\r\n\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t");
            
            #line 95 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\r\n\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t");
            
            #line 99 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t");
            
            #line 102 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
} else {
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<table class=\"table table-striped\">\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td" +
                    ">\r\n\t\t\t\t\t\t\t\t\t<b>No Properties</b>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</tbody>\r\n\t" +
                    "\t\t\t\t</table>\r\n\t\t\t\t");
            
            #line 112 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t<h3>Events</h3>\r\n\t\t\t\t");
            
            #line 115 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
if(CommandModel.RaisedEvent != null)
				{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t<table class=\"table table-striped\">\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>Na" +
                    "me</th>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t" +
                    "\t\t\t\t\t\t\t\t<a href=\"../events/");
            
            #line 126 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CommandModel.RaisedEvent.Name));
            
            #line default
            #line hidden
            this.Write(".html\">");
            
            #line 126 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CommandModel.RaisedEvent.ClearName));
            
            #line default
            #line hidden
            this.Write("</a>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t");
            
            #line 131 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
} else {
            
            #line default
            #line hidden
            this.Write("\t\t\t\t<table class=\"table table-striped\">\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>" +
                    "\r\n\t\t\t\t\t\t\t\t\t<b>No Events Raised</b>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</tbody>\r" +
                    "\n\t\t\t\t</table>\r\n\t\t\t\t");
            
            #line 141 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t<h3>Checks</h3>\r\n");
            
            #line 143 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
if(CommandModel.Checks.Count > 0)
{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<table class=\"table table-striped\">\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>N" +
                    "ame</th>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t");
            
            #line 152 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
 foreach(var check in CommandModel.Checks.OrderBy(x=>x.Name))
			{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t");
            
            #line 156 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(check.ClearName));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t");
            
            #line 159 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n");
            
            #line 162 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
} else {
            
            #line default
            #line hidden
            this.Write("\t\t\t\t<table class=\"table table-striped\">\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>" +
                    "\r\n\t\t\t\t\t\t\t\t\t<b>No Checks Included</b>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</tbody" +
                    ">\r\n\t\t\t\t</table>\r\n");
            
            #line 172 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t<h3>Rules</h3>\r\n");
            
            #line 175 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
if(CommandModel.Rules.Count > 0)
{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<table class=\"table table-striped\">\r\n\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>N" +
                    "ame</th>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t");
            
            #line 184 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
 foreach(var rule in CommandModel.Rules.OrderBy(x=>x.Name))
			{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<a href=\"../rules/");
            
            #line 188 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rule.Name));
            
            #line default
            #line hidden
            this.Write(".html\">");
            
            #line 188 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(rule.ClearName));
            
            #line default
            #line hidden
            this.Write("</a>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t");
            
            #line 191 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n");
            
            #line 194 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
} else {
            
            #line default
            #line hidden
            this.Write("\t\t\t\t<table class=\"table table-striped\">\r\n\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>" +
                    "\r\n\t\t\t\t\t\t\t\t\t<b>No Rules Included</b>\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</tbody>" +
                    "\r\n\t\t\t\t</table>\r\n");
            
            #line 204 "S:\GIT\dev-b\Tools\General\src\SAHL.Tools.DomainServiceDocumenter.Lib\Templates\Command.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t</body>\r\n</html>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class CommandBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
