<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#if(this.Model.Name=="Required") {#>
if(this.<#=this.Model.PropertyName#>!==0 && !this.<#=this.Model.PropertyName#>) {
							results.push({'<#=this.Model.PropertyName#>': '<#=String.IsNullOrWhiteSpace(this.Model.ErrorMessage)? this.Model.PropertyNameText + " is required": this.Model.ErrorMessage#>'});
						}<#}#>
<#if(this.Model.Name=="MinLength") {#>
if(this.<#=this.Model.PropertyName#> && this.<#=this.Model.PropertyName#>.length < <#=this.Model.Args[0]#>) {
							results.push({'<#=this.Model.PropertyName#>': '<#=String.IsNullOrWhiteSpace(this.Model.ErrorMessage)? this.Model.PropertyNameText + " must be longer than " + this.Model.Args[0] : this.Model.ErrorMessage#>'});
						}<#}#>
<#if(this.Model.Name=="MaxLength") {#>
if(this.<#=this.Model.PropertyName#> && this.<#=this.Model.PropertyName#>.length > <#=this.Model.Args[0]#>) {
							results.push({'<#=this.Model.PropertyName#>': '<#=String.IsNullOrWhiteSpace(this.Model.ErrorMessage)? this.Model.PropertyNameText + " may not be longer than " + this.Model.Args[0] : this.Model.ErrorMessage#>'});
						}<#}#>
<#if(this.Model.Name=="RegularExpression") {#>
if(!(typeof(this.<#=this.Model.PropertyName#>) === 'undefined' || this.<#=this.Model.PropertyName#> === null)){
						var <#=this.Model.PropertyName#>Found = this.<#=this.Model.PropertyName#>.match(/<#=this.Model.Args[0]#>/);
						if(!<#=this.Model.PropertyName#>Found || <#=this.Model.PropertyName#>Found.length <= 0) {
							results.push({'<#=this.Model.PropertyName#>': '<#=String.IsNullOrWhiteSpace(this.Model.ErrorMessage)? this.Model.PropertyNameText + " is invalid" : this.Model.ErrorMessage#>'});
							}
						}<#}#>
