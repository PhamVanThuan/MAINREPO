// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SAHL.Tools.Capitec.CSJsonifier.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using SAHL.Tools.Capitec.CSJsonifier;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\git\blue\dev\Tools\General\src\SAHL.Tools.Capitec.CSJsonifier\Templates\FakeBaseTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class FakeBaseTemplate : FakeBaseTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("var ");
            
            #line 7 "C:\git\blue\dev\Tools\General\src\SAHL.Tools.Capitec.CSJsonifier\Templates\FakeBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TextHelper.PascalCase(this.NamespaceProvider.Prefix + this.Result.FakeType)));
            
            #line default
            #line hidden
            this.Write("Fakes = function(){\r\n    function SystemMessages(){\r\n        return {\r\n          " +
                    "  \"$type\" : \"SAHL.Core.SystemMessages.SystemMessageCollection, SAHL.Core\",\r\n    " +
                    "        \"HasErrors\" : false,\r\n            \"HasWarnings\" : false,\r\n            \"E" +
                    "rrorMessages\" : function(){\r\n                var retObj = this.AllMessages;\r\n   " +
                    "             retObj.$values = $.grep(this.AllMessages.$values,function(msg){\r\n  " +
                    "                  return ((msg.Severity === 1)||(msg.Severity === 3));\r\n        " +
                    "        });\r\n                return retObj;\r\n            },\r\n            \"Warnin" +
                    "gMessages\" : function(){\r\n                var retObj = this.AllMessages;\r\n      " +
                    "          retObj.$values = $.grep(this.AllMessages.$values,function(msg){\r\n     " +
                    "               return msg.Severity === 0;\r\n                });\r\n                " +
                    "return retObj;\r\n            },\r\n            \"AllMessages\" : {\r\n                \"" +
                    "$id\" : \"99\",\r\n                \"$type\" : \"System.Collections.Generic.List`1[[SAHL" +
                    ".Core.SystemMessages.ISystemMessage, SAHL.Core\",\r\n                \"$values\" : []" +
                    "\r\n            },\r\n            \"AddError\": function(message){\r\n                va" +
                    "r message = {\"$type\" : \"SAHL.Core.SystemMessages.SystemMessage, SAHL.Core, Versi" +
                    "on=0.0.0.0, Culture=neutral, PublicKeyToken=null\",\"Severity\" : 1,\"Message\" : mes" +
                    "sage};\r\n                this.AllMessages.$values.push(message);\r\n               " +
                    " this.HasErrors = true;\r\n            },\r\n            \"AddWarning\": function(mess" +
                    "age){\r\n                var message = {\"$type\" : \"SAHL.Core.SystemMessages.System" +
                    "Message, SAHL.Core, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\",\"Seve" +
                    "rity\" : 0,\"Message\" : message};\r\n                this.AllMessages.$values.push(m" +
                    "essage);\r\n                this.HasWarnings = true;\r\n            },\r\n            " +
                    "\"AddInfo\": function(message){\r\n                var message = {\r\n                " +
                    "    \"$type\" : \"SAHL.Core.SystemMessages.SystemMessage, SAHL.Core, Version=0.0.0." +
                    "0, Culture=neutral, PublicKeyToken=null\",\r\n                    \"Severity\" : 2,\r\n" +
                    "                    \"Message\" : message\r\n                };\r\n                thi" +
                    "s.AllMessages.$values.push(message);\r\n            }\r\n        }\r\n    }\r\n");
            
            #line 52 "C:\git\blue\dev\Tools\General\src\SAHL.Tools.Capitec.CSJsonifier\Templates\FakeBaseTemplate.tt"
 if(this.Result != null) { 
            
            #line default
            #line hidden
            
            #line 53 "C:\git\blue\dev\Tools\General\src\SAHL.Tools.Capitec.CSJsonifier\Templates\FakeBaseTemplate.tt"
 foreach(var resultType in this.Result.CommandResultTypes) {
            
            #line default
            #line hidden
            this.Write("    this.");
            
            #line 54 "C:\git\blue\dev\Tools\General\src\SAHL.Tools.Capitec.CSJsonifier\Templates\FakeBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(resultType.Name));
            
            #line default
            #line hidden
            this.Write(@" = function(){
        return {
            ""$type"" : ""SAHL.Core.Web.Services.ServiceQueryResult, SAHL.Core.Web, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null"",
            ""ReturnData"" : {
                ""$type"" : ""SAHL.Core.Services.ServiceQueryResult`1[[");
            
            #line 58 "C:\git\blue\dev\Tools\General\src\SAHL.Tools.Capitec.CSJsonifier\Templates\FakeBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(resultType.FullName));
            
            #line default
            #line hidden
            this.Write("]]\",\r\n                \"NumberOfPages\": 1,\r\n                \"ResultCountInAllPages" +
                    "\": 1,\r\n                \"ResultCountInPage\": 1,\r\n                \"Results\": {\r\n  " +
                    "                  \"$type\": \"System.Collections.Generic.List`1[[");
            
            #line 63 "C:\git\blue\dev\Tools\General\src\SAHL.Tools.Capitec.CSJsonifier\Templates\FakeBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(resultType.FullName));
            
            #line default
            #line hidden
            this.Write("]]\",\r\n                    \"$values\" : []\r\n                }\r\n            },\r\n    " +
                    "        \"SystemMessages\" : SystemMessages(),\r\n            ");
            
            #line 68 "C:\git\blue\dev\Tools\General\src\SAHL.Tools.Capitec.CSJsonifier\Templates\FakeBaseTemplate.tt"
if(resultType.Properties.Count() > 0){
            
            #line default
            #line hidden
            this.Write("            \"Add\" : function(");
            
            #line 69 "C:\git\blue\dev\Tools\General\src\SAHL.Tools.Capitec.CSJsonifier\Templates\FakeBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(resultType.Properties.Select(x=>TextHelper.PascalCase(x.Name)).Aggregate((current,next) => current + "," + next)));
            
            #line default
            #line hidden
            this.Write("){\r\n                this.ReturnData.Results.$values.push(\r\n                    {\r" +
                    "\n                        ");
            
            #line 72 "C:\git\blue\dev\Tools\General\src\SAHL.Tools.Capitec.CSJsonifier\Templates\FakeBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(resultType.Properties.Select(x=>string.Format("\"{0}\": {1}",x.Name,TextHelper.PascalCase(x.Name))).Aggregate((current,next) => current + ",\r\n\t\t\t\t\t" + next)));
            
            #line default
            #line hidden
            this.Write("\r\n                    }\r\n                )\r\n            }\r\n            ");
            
            #line 76 "C:\git\blue\dev\Tools\General\src\SAHL.Tools.Capitec.CSJsonifier\Templates\FakeBaseTemplate.tt"
}
            
            #line default
            #line hidden
            this.Write("        }\r\n    }\r\n");
            
            #line 79 "C:\git\blue\dev\Tools\General\src\SAHL.Tools.Capitec.CSJsonifier\Templates\FakeBaseTemplate.tt"
 }} 
            
            #line default
            #line hidden
            this.Write("    return {\r\n        SystemMessages : SystemMessages");
            
            #line 81 "C:\git\blue\dev\Tools\General\src\SAHL.Tools.Capitec.CSJsonifier\Templates\FakeBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Result.CommandResultTypes.Count > 0 ? "," : ""));
            
            #line default
            #line hidden
            this.Write("\r\n        ");
            
            #line 82 "C:\git\blue\dev\Tools\General\src\SAHL.Tools.Capitec.CSJsonifier\Templates\FakeBaseTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Result.CommandResultTypes.Count > 0 ? this.Result.CommandResultTypes.Select(x=> string.Format("{0}: {0}",x.Name)).Aggregate((current, next) => current + ",\r\n\t\t" + next) : ""));
            
            #line default
            #line hidden
            this.Write("\r\n    };\r\n}();");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class FakeBaseTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
