#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SAHL.Tools.Capitec.CSJsonifier" #>
var <#= TextHelper.PascalCase(this.NamespaceProvider.Prefix + this.Result.FakeType)#>Fakes = function(){
    function SystemMessages(){
        return {
            "$type" : "SAHL.Core.SystemMessages.SystemMessageCollection, SAHL.Core",
            "HasErrors" : false,
            "HasWarnings" : false,
            "ErrorMessages" : function(){
                var retObj = this.AllMessages;
                retObj.$values = $.grep(this.AllMessages.$values,function(msg){
                    return ((msg.Severity === 1)||(msg.Severity === 3));
                });
                return retObj;
            },
            "WarningMessages" : function(){
                var retObj = this.AllMessages;
                retObj.$values = $.grep(this.AllMessages.$values,function(msg){
                    return msg.Severity === 0;
                });
                return retObj;
            },
            "AllMessages" : {
                "$id" : "99",
                "$type" : "System.Collections.Generic.List`1[[SAHL.Core.SystemMessages.ISystemMessage, SAHL.Core",
                "$values" : []
            },
            "AddError": function(message){
                var message = {"$type" : "SAHL.Core.SystemMessages.SystemMessage, SAHL.Core, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null","Severity" : 1,"Message" : message};
                this.AllMessages.$values.push(message);
                this.HasErrors = true;
            },
            "AddWarning": function(message){
                var message = {"$type" : "SAHL.Core.SystemMessages.SystemMessage, SAHL.Core, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null","Severity" : 0,"Message" : message};
                this.AllMessages.$values.push(message);
                this.HasWarnings = true;
            },
            "AddInfo": function(message){
                var message = {
                    "$type" : "SAHL.Core.SystemMessages.SystemMessage, SAHL.Core, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
                    "Severity" : 2,
                    "Message" : message
                };
                this.AllMessages.$values.push(message);
            }
        }
    }
<# if(this.Result != null) { #>
<# foreach(var resultType in this.Result.CommandResultTypes) {#>
    this.<#= resultType.Name #> = function(){
        return {
            "$type" : "SAHL.Core.Web.Services.ServiceQueryResult, SAHL.Core.Web, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null",
            "ReturnData" : {
                "$type" : "SAHL.Core.Services.ServiceQueryResult`1[[<#= resultType.FullName #>]]",
                "NumberOfPages": 1,
                "ResultCountInAllPages": 1,
                "ResultCountInPage": 1,
                "Results": {
                    "$type": "System.Collections.Generic.List`1[[<#= resultType.FullName #>]]",
                    "$values" : []
                }
            },
            "SystemMessages" : SystemMessages(),
            <#if(resultType.Properties.Count() > 0){#>
            "Add" : function(<#=resultType.Properties.Select(x=>TextHelper.PascalCase(x.Name)).Aggregate((current,next) => current + "," + next)#>){
                this.ReturnData.Results.$values.push(
                    {
                        <#=resultType.Properties.Select(x=>string.Format("\"{0}\": {1}",x.Name,TextHelper.PascalCase(x.Name))).Aggregate((current,next) => current + ",\r\n\t\t\t\t\t" + next)#>
                    }
                )
            }
            <#}#>
        }
    }
<# }} #>
    return {
        SystemMessages : SystemMessages<#= this.Result.CommandResultTypes.Count > 0 ? "," : "" #>
        <#= this.Result.CommandResultTypes.Count > 0 ? this.Result.CommandResultTypes.Select(x=> string.Format("{0}: {0}",x.Name)).Aggregate((current, next) => current + ",\r\n\t\t" + next) : ""#>
    };
}();