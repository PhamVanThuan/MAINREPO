<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using SAHL.Core.Data;
using Newtonsoft.Json;

namespace <#=this.Namespace#>
{
    [Serializable]
    public partial class <#=BusinessModelDescription.ClassName#>DataModel : <#if(ClassesThatMustBeMarshalByRef.Classes.Contains(BusinessModelDescription.ClassName)) {#>MarshalByRefObject,<#}#> IDataModel<# if(BusinessModelDescription.HasIdentitySeed){#>, IDataModelWithIdentitySeed<#}#><# if(BusinessModelDescription.HasIdentitySeedId){#>, IDataModelWithPrimaryKeyId <#}#>

    {
        public <#=BusinessModelDescription.ClassName#>DataModel(<#=this.PropertiesToParametersWithoutKey()#>)
        {
<# foreach(BusinessModelDescriptionProperty property in BusinessModelDescription.Properties.Where(x=>x.IsIdentitySeed == false && x.PropertyName.ToLower() != "id"))
{#>
            this.<#=property.PropertyName.Replace(" ","_")#> = <#=this.ToPascalCase(property.PropertyName)#>;
<#}#>		
        }<# if(BusinessModelDescription.HasIdentitySeed || BusinessModelDescription.HasNonPrimaryKeyIdColumn){#>

		[JsonConstructor]
        public <#=BusinessModelDescription.ClassName#>DataModel(<#=this.PropertiesToParameters()#>)
        {
<# foreach(BusinessModelDescriptionProperty property in BusinessModelDescription.Properties)
{#>
            this.<#=property.PropertyName.Replace(" ","_")#> = <#=this.ToPascalCase(property.PropertyName)#>;
<#}#>		
        }<#}#>		
<# foreach(BusinessModelDescriptionProperty property in BusinessModelDescription.Properties)
{#>

        public <#=property.TypeName#> <#=property.PropertyName.Replace(" ","_")#> { get; set; }
<#}#>
<# if(BusinessModelDescription.HasIdentitySeed){#>

        public void SetKey(<#=BusinessModelDescription.PrimaryKeyPropertyType#> key)
        {
            this.<#=BusinessModelDescription.PrimaryKeyProperty#> =  key;
        }
<#}#>
<# foreach(EnumerationPropertyValue enumValue in BusinessModelDescription.EnumerationValues)
{#>

        public const string <#= this.EscapeName(enumValue.Name) #> = "<#= enumValue.Id #>";
<#}#>
    }
}