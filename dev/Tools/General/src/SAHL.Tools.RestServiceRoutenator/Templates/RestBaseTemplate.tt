'use strict';

<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
angular.module('<#=this.NamespaceProvider.Namespace#>.<#=this.Result.Type.ToLower()#>', ['sahl.js.core.fluentRestQuery']).
    factory('$<#= TextHelper.PascalCase(this.NamespaceProvider.Prefix +"Service"+ this.Result.Type)#>', ['$fluentRestQuery',function ($fluentRestQuery) {

		 var settingsToPass = {
			route: '',
			parameters: [],
			pushParameter: function (param, inPosition) {
				settingsToPass.parameters[inPosition] = param;
			}
		};

		var internals = {
			builder: new $fluentRestQuery(settingsToPass),
			extendIt: function (objectToExtend, routeToPass) {
				settingsToPass.route = routeToPass;
				angular.extend(objectToExtend, new $fluentRestQuery(settingsToPass));
				return objectToExtend;
			}
		};

        var routes = {
            <#= this.generatedCode #>
            };
        return routes;
        
        
    }])<#if(this.Result.UseContainer){#>.
    factory('$<#= TextHelper.PascalCase(this.NamespaceProvider.Prefix + this.Result.Type)#>Container', ['$<#= TextHelper.PascalCase(this.NamespaceProvider.Prefix + this.Result.Type)#>',function ($<#= TextHelper.PascalCase(this.NamespaceProvider.Prefix + this.Result.Type)#>) {
        var shared = (function () {
            var Container = {
                <#= this.Result.FoundTypes.Count > 0 ? this.Result.FoundTypes.Select(x=> string.Format("'{0},{1}': ${2}.{3}",x.FullName,x.Module.Assembly.Name.Name,TextHelper.PascalCase(this.NamespaceProvider.Prefix + this.Result.Type),x.Name)).Aggregate((current, next) => current + ",\r\n\t\t\t\t" + next) : ""#>
            }
            return {
                Container : Container
            };
        }());
        return routes;
    }])<#}#>;