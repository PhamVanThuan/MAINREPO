//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SAHL.Tools.Workflow.Common.Database.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SAHL.Tools.Workflow.Common.Database.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///declare @OldProcessID int
        ///declare @NewProcessID int
        ///
        ///set @NewProcessID = :NewProcessID
        ///set @OldProcessID = :OldProcessID
        ///
        ///
        ///IF OBJECT_ID(&apos;tempdb..#InstancesToRecalculate&apos;) IS NOT NULL
        ///    DROP TABLE #InstancesToRecalculate
        ///
        ///CREATE TABLE #InstancesToRecalculate (InstanceID BIGINT)
        ///
        ///INSERT INTO #InstancesToRecalculate
        ///SELECT * FROM [x2].[x2].fGetActivitySecurityChanges(@NewProcessID, @OldProcessID)
        ///
        ///INSERT INTO #InstancesToRecalculate
        ///SELECT * FROM [x2].[x2].fGetStateSecurityChanges(@NewProce [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CompareSecurity {
            get {
                return ResourceManager.GetString("CompareSecurity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- SETUP SOME TEMPORARY INDEXES
        ///
        ///IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N&apos;[X2].[ScheduledActivity]&apos;) AND name = N&apos;IX_ScheduledActivity_MIGRATE&apos;)
        ///	CREATE NONCLUSTERED INDEX [IX_ScheduledActivity_MIGRATE]
        ///	ON [X2].[X2].[ScheduledActivity] ([WorkFlowProviderName])
        ///	INCLUDE ([InstanceID],[Time],[ActivityID],[Priority],[ID])
        ///
        ///IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N&apos;[X2].[InstanceActivitySecurity]&apos;) AND name = N&apos;IX_InstanceActivitySecurity_Activi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string createindexes {
            get {
                return ResourceManager.GetString("createindexes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- DROP TEMPORARY INDEXES
        ///IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N&apos;[X2].[ScheduledActivity]&apos;) AND name = N&apos;IX_ScheduledActivity_MIGRATE&apos;)
        ///DROP INDEX [IX_ScheduledActivity_MIGRATE] ON [X2].[X2].[ScheduledActivity] WITH ( ONLINE = OFF )
        ///
        ///IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N&apos;[X2].[InstanceActivitySecurity]&apos;) AND name = N&apos;IX_InstanceActivitySecurity_ActivityID_MIGRATE&apos;)
        ///DROP INDEX [IX_InstanceActivitySecurity_ActivityID_MIGRATE] ON [X2].[X2].[Instance [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string dropindexes {
            get {
                return ResourceManager.GetString("dropindexes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to USE X2;
        ////*
        ///Pre migration Query to map states by X2ID
        ///and Declarations
        ///*/
        ///DECLARE @OldWorkFlowID INT
        ///DECLARE @NewWorkFlowID INT
        ///DECLARE @NewWorkflowIDs TABLE(ID INT)
        ///DECLARE @OLDWorkflowIDs TABLE(ID INT)
        ///CREATE TABLE #PublishedStateMapping (
        ///	[OldWorkFlowID] INT
        ///	,[OldStateID] INT
        ///	,[NewWorkFlowID] INT
        ///	,[NewStateID] INT
        ///)
        ///
        ///
        ///SET @NewWorkFlowID = :NewWorkFlowID
        ///INSERT INTO @NewWorkflowIDs (ID) SELECT MAX(ID) as ID FROM X2.X2.Workflow (NOLOCK) GROUP BY NAME ORDER BY NAME
        ///INSERT INTO @OLDWork [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string MapStates {
            get {
                return ResourceManager.GetString("MapStates", resourceCulture);
            }
        }
    }
}
