<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="WorkflowTools.Common.WorkflowElements" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>

	#region WorkFlowData <#=workflow.Name#>
	
	public class X2<#=workflow.SafeName#>_Data : IContextualDataProvider
	{
		private bool m_HasChanges = false;
<#        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables)
        {#>
<#
            string typeName = "";
            string typeDeclaration = "";
	        switch(customVariable.VariableType)
            {
                case CustomVariableTypeEnum.Bool:
                    typeName = "Boolean";
                    break;
                case CustomVariableTypeEnum.BigInteger:
                    typeName = "Int64";
                    break;
                case CustomVariableTypeEnum.DateTime:
                    typeName = "DateTime";
                    break;
                case CustomVariableTypeEnum.Decimal:
                    typeName = "Decimal";
                    break;
                case CustomVariableTypeEnum.Double:
                    typeName = "Double";
                    break;
                case CustomVariableTypeEnum.Integer:
                    typeName = "Int32";
                    break;
                case CustomVariableTypeEnum.Single:
                    typeName = "Single";
                    break;
                case CustomVariableTypeEnum.String:
                    typeName = "String";
                    break;
            }
#>	
<#            if(customVariable.VariableType == CustomVariableTypeEnum.DateTime){#>
		private <#=typeName#> m_<#=customVariable.SafeName#> = (DateTime)System.Data.SqlTypes.SqlDateTime.Now;
<#            }else{#>
		private <#=typeName#> m_<#=customVariable.SafeName#>;
<#            }#>
		public <#=typeName#> <#=customVariable.SafeName#>
		{
			get
			{
				return m_<#=customVariable.SafeName#>;
			}
			set
			{
				m_HasChanges = true;
				m_<#=customVariable.SafeName#> = value;
			}
		}
<#        }#>
	}
	
		#region IX2WorkFlowDataProvider Members

		public void LoadData(Int64 InstanceID)
		{
			SqlDataAdapter SDA = null;
			DataTable WorkFlowData = new DataTable();
			try
			{
				WorkerHelper.FillFromQuery(WorkFlowData, "select * from [X2DATA].<#=workflow.SafeName#> (nolock) where InstanceID = " + InstanceID, Tran.Context, null);
				if (WorkFlowData.Rows.Count > 0)
				{
<#        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables)
        {#>
					if(WorkFlowData.Rows[0]["<#=customVariable.SafeName#>"] != DBNull.Value)
						m_CapBroker = Convert.ToString(WorkFlowData.Rows[0]["<#=customVariable.SafeName#>"]);
<#        }#>			
				}
			}
			catch
			{
			}
			finally
			{
				if(SDA != null)
					SDA.Dispose();
			}
		}

		public void SetDataFields(System.Collections.Generic.Dictionary<string, string> Fields)
		{
			if (Fields != null)
			{
				string[] Keys = new string[Fields.Count];
				Fields.Keys.CopyTo(Keys, 0);
				for (int i = 0; i < Fields.Count; i++)
				{
					switch (Keys[i].ToLower())
					{
<#        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){#>
						case "<#=customVariable.SafeName.ToLower()#>":
							<#=customVariable.SafeName#> = Convert.ToString(Fields[Keys[i]]);
							break;
<#        }#>
					}
				}
			}
		}

		public void SaveData(Int64 InstanceID)
		{
			if(m_HasChanges == true)
			{
				// Create a collection
				ParameterCollection Parameters = new ParameterCollection();
				// Add the required parameters
<#string updateStr="";int loopcnt = 0;#>
<#foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){
	updateStr += "["+ customVariable.SafeName + "] = @P" + loopcnt.ToString() + ", ";#>					
<#if(this.RequiresNullCheck(customVariable.VariableType)){#>
				if(m_<#=                    customVariable.SafeName#> != null)
					WorkerHelper.AddParameter(Parameters, "@P<#=loopcnt.ToString()#>", <#=SqlDataTypeFromCustomVariableType(customVariable.VariableType)#>, ParameterDirection.Input , m_<#=customVariable.SafeName#>);
				else
					WorkerHelper.AddParameter(Parameters, "@P<#=loopcnt.ToString()#>", <#=SqlDataTypeFromCustomVariableType(customVariable.VariableType)#>, ParameterDirection.Input , DBNull.Value);
<#}else{#>
                WorkerHelper.AddParameter(Parameters, "@P<#=loopcnt.ToString()#>", <#=SqlDataTypeFromCustomVariableType(customVariable.VariableType)#>, ParameterDirection.Input , m_<#=customVariable.SafeName#>);
<#}#>
<#loopcnt++;}updateStr=updateStr.Substring(0,updateStr.Length-2);#>				
				WorkerHelper.ExecuteNonQuery(Tran.Context, "update [X2DATA].[<#=workflow.SafeName#>] with (rowlock) set <#=updateStr#> where InstanceID = '" + InstanceID + "'", Parameters);
			}
		}

		public void InsertData(IActiveDataTransaction Tran, Int64 InstanceID, Dictionary<string, string> Fields)
		{
			//// Set Data Fields
			SetDataFields(Fields);
			// Create a collection
			ParameterCollection Parameters = new ParameterCollection();
			// Add the required parameters
<#        updateStr="";
          loopcnt = 0;#>
<#        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){updateStr += "["+ customVariable.SafeName + "] = @P" + loopcnt.ToString() + ", ";#>					
<#            if(this.RequiresNullCheck(customVariable.VariableType)){#>
				if(m_<#=                    customVariable.SafeName#> != null)
					WorkerHelper.AddParameter(Parameters, "@P<#=loopcnt.ToString()#>", <#=SqlDataTypeFromCustomVariableType(customVariable.VariableType)#>, ParameterDirection.Input , m_<#=customVariable.SafeName#>);
				else
					WorkerHelper.AddParameter(Parameters, "@P<#=loopcnt.ToString()#>", <#=SqlDataTypeFromCustomVariableType(customVariable.VariableType)#>, ParameterDirection.Input , DBNull.Value);
<#            }else{#>
                WorkerHelper.AddParameter(Parameters, "@P<#=loopcnt.ToString()#>", <#=SqlDataTypeFromCustomVariableType(customVariable.VariableType)#>, ParameterDirection.Input , m_<#=                    customVariable.SafeName#>);
<#            }#>
<#            loopcnt++;}updateStr=updateStr.Substring(0,updateStr.Length-2);#>	
			WorkerHelper.ExecuteNonQuery(Tran.Context, "insert into [X2DATA].[<#=workflow.SafeName#>] values( " + InstanceID + ", @P0, @P1, @P2, @P3, @P4, @P5, @P6, @P7, @P8, @P9, @P10, @P11, @P12)", Parameters);
		}

		public bool Contains(string FieldName)
		{
			switch (FieldName.ToLower())
			{
<#        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){#>
				case "<#=customVariable.SafeName.ToLower()#>":
					return true;
<#}#>					
				default:
					return false;
			}
		}

		public string GetField(string FieldName)
		{
			switch (FieldName.ToLower())
			{
<#        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){#>
				case "<#=customVariable.SafeName.ToLower()#>":
					return m_<#=customVariable.SafeName#>.ToString();
<#}#>			
				default:
					return "";
			}
		}

		public ISqlStatement<DynamicObject> GetUpdateStatement()
		{
			return null;
		}

		public Dictionary<string, string> GetData()
		{
			Dictionary<string, string> Data = new Dictionary<string, string>();
<#foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){#>
<#if(this.RequiresNullCheck(customVariable.VariableType)){#>
			if(m_<#=customVariable.SafeName#> != null)
				Data.Add( "<#=customVariable.SafeName.ToLower()#>", m_<#=customVariable.SafeName#>.ToString());
<#}else{#>
			Data.Add( "<#=customVariable.SafeName.ToLower()#>", m_<#=customVariable.SafeName#>.ToString());
<#}#>
<#}#>
		return Data;
	}

	#endregion