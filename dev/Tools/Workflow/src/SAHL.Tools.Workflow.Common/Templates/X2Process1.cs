// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SAHL.Tools.Workflow.Common.Templates
{
    using SAHL.Tools.Workflow.Common.WorkflowElements;
    using System.Data;
    using System.Data.SqlClient;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class X2Process : X2ProcessBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"using System.IO;
using System.Reflection;
using SAHL.Core.Logging;
using SAHL.Core.X2.Logging;
using System;
using System.Data;
using System.Xml;
using System.Linq;
using SAHL.Core;
using SAHL.Core.Data;
using SAHL.Core.Data.Context.Configuration;
using SAHL.Core.Data.Models.X2;
using SAHL.Core.Logging;
using SAHL.Core.SystemMessages;
using SAHL.Core.X2;
using SAHL.Core.X2.Providers;
using Newtonsoft.Json;
using SAHL.Core.Attributes;
using SAHL.Core.BusinessModel.Enums;
using SAHL.Core.Identity;
using SAHL.Core.Services;
using StructureMap;
using SAHL.Workflow.Maps.Config;

");
            
            #line 29 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
 foreach(UsingStatement usingStatement in process.UsingStatements)
{ 
            
            #line default
            #line hidden
            this.Write("using ");
            
            #line 31 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(usingStatement.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 32 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write("namespace ");
            
            #line 33 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(process.SafeName));
            
            #line default
            #line hidden
            this.Write(@"
{

	#region Process

	public class Process : MarshalByRefObject, SAHL.Core.X2.IX2Process
	{
		SAHL.Core.X2.Logging.IX2Logging x2logger;
		SAHL.Core.Logging.ILogger logger;
		SAHL.Core.Logging.ILoggerSource loggerSource;

		public Process()
		{
		    this.logger=ObjectFactory.GetInstance<SAHL.Core.Logging.ILogger>();
			this.x2logger=ObjectFactory.GetInstance<SAHL.Core.X2.Logging.IX2Logging>();
			this.loggerSource=ObjectFactory.GetInstance<SAHL.Core.Logging.ILoggerSource>();
            var uiStatementProvider = this.GetUIStatementProvider();
			DbContextConfiguration.Instance.RepositoryFactory.UIStatementProvider.Add(uiStatementProvider);
		}
		
		public IUIStatementsProvider GetUIStatementProvider()
		{
			return new UIStatements();
		}

		public override object InitializeLifetimeService()
		{
			return null;
		}
		
		public IX2Map GetWorkflowMap(string WorkFlowName)
		{
			switch(WorkFlowName)
			{
");
            
            #line 67 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
 foreach(Workflow workflow in process.Workflows)
{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase \"");
            
            #line 69 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.Name));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\treturn new X2");
            
            #line 70 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("();\r\n");
            
            #line 71 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\tdefault:\r\n\t\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic string GetDynamicRole(st" +
                    "ring RoleName)\r\n\t\t{\r\n\t\t\tswitch(RoleName)\r\n\t\t\t{\r\n");
            
            #line 81 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(GlobalRole role in process.DynamicGlobalRoles)
{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase \"");
            
            #line 83 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(role.Name));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\treturn OnGetRole_");
            
            #line 84 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(role.SafeName));
            
            #line default
            #line hidden
            this.Write("();\r\n");
            
            #line 85 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\tdefault:\r\n\t\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t#region Process Roles\r\n\r\n");
            
            #line 93 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(GlobalRole role in process.DynamicGlobalRoles){
foreach(CodeSection codeSection	in role.AllCodeSections)
{
string[] codeLines = codeSection.Code.Split(new String[]{"\n"}, StringSplitOptions.RemoveEmptyEntries);
            
            #line default
            #line hidden
            
            #line 97 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(string line in codeLines){
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 98 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(line));
            
            #line default
            #line hidden
            
            #line 98 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}}
            
            #line default
            #line hidden
            
            #line 99 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\t\t#endregion\r\n\t}\r\n\t\r\n\t#endregion\r\n");
            
            #line 105 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
 foreach(Workflow workflow in process.Workflows){
            
            #line default
            #line hidden
            this.Write("\t\r\n\t#region WorkFlowData ");
            
            #line 106 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\t\r\n\tpublic interface IX2");
            
            #line 108 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data : IX2ContextualDataProvider\r\n\t{\r\n");
            
            #line 110 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(AbstractCustomVariable customVariable in workflow.CustomVariables)
{
            
            #line default
            #line hidden
            
            #line 112 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"

	        string typeName = "";
            string typeDeclaration = "";
	        switch(customVariable.VariableType)
            {
                case CustomVariableTypeEnum.Bool:
                    typeName = "Boolean";
                    break;
                case CustomVariableTypeEnum.BigInteger:
                    typeName = "Int64";
                    break;
                case CustomVariableTypeEnum.DateTime:
                    typeName = "DateTime";
                    break;
                case CustomVariableTypeEnum.Decimal:
                    typeName = "Decimal";
                    break;
                case CustomVariableTypeEnum.Double:
                    typeName = "Double";
                    break;
                case CustomVariableTypeEnum.Integer:
                    typeName = "Int32";
                    break;
                case CustomVariableTypeEnum.Single:
                    typeName = "Single";
                    break;
                case CustomVariableTypeEnum.String:
                    typeName = "String";
                    break;
                case CustomVariableTypeEnum.Text:
                    typeName = "String";
                    break;
            }

            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\t");
            
            #line 146 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 146 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(" { get; set; }\r\n");
            
            #line 147 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\r\n\t}\r\n\t\r\n\tpublic partial class UIStatements : IUIStatementsProvider\r\n    {\r\n\t\tpu" +
                    "blic const string x2");
            
            #line 153 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName.ToLower()));
            
            #line default
            #line hidden
            this.Write("_data_insert = \"insert into x2.x2data.");
            
            #line 153 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write(" (InstanceID) values (@InstanceID)\";\r\n\t\tpublic const string x2");
            
            #line 154 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName.ToLower()));
            
            #line default
            #line hidden
            this.Write("_data_update = \"update x2.x2data.");
            
            #line 154 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write(" set ");
            
            #line 154 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
string updateset = "";
			foreach(AbstractCustomVariable customVariable in workflow.CustomVariables) 
			{
				updateset = string.Format("{0}[{1}]=@{1},", updateset, customVariable.SafeName);
			}
			updateset=updateset.Remove(updateset.Length-1,1);
            
            #line default
            #line hidden
            
            #line 159 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(updateset));
            
            #line default
            #line hidden
            this.Write(" where InstanceID=@InstanceID\";\r\n\t\t\r\n\t}\r\n\r\n\tpublic class X2");
            
            #line 163 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("SqlStatement : ISqlStatement<X2");
            
            #line 163 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data>\r\n\t{\r\n\t");
            
            #line 165 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
string s = "";
	foreach(AbstractCustomVariable customVariable in workflow.CustomVariables) {
            
            #line default
            #line hidden
            
            #line 166 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
string typeName = "";
            string typeDeclaration = "";
	        switch(customVariable.VariableType)
            {
                case CustomVariableTypeEnum.Bool:
                    typeName = "Boolean";
                    break;
                case CustomVariableTypeEnum.BigInteger:
                    typeName = "Int64";
                    break;
                case CustomVariableTypeEnum.DateTime:
                    typeName = "DateTime";
                    break;
                case CustomVariableTypeEnum.Decimal:
                    typeName = "Decimal";
                    break;
                case CustomVariableTypeEnum.Double:
                    typeName = "Double";
                    break;
                case CustomVariableTypeEnum.Integer:
                    typeName = "Int32";
                    break;
                case CustomVariableTypeEnum.Single:
                    typeName = "Single";
                    break;
                case CustomVariableTypeEnum.String:
                    typeName = "String";
                    break;
                case CustomVariableTypeEnum.Text:
                    typeName = "String";
                    break;
            }s=s.TrimStart();s+=typeName+" "+customVariable.SafeName+",";
            
            #line default
            #line hidden
            
            #line 197 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write("public X2");
            
            #line 197 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("SqlStatement(long instanceId, ");
            
            #line 197 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(s.Remove(s.Length-1,1).TrimStart().TrimEnd()));
            
            #line default
            #line hidden
            this.Write(") \r\n\t\t{\r\n\t\t\tthis.InstanceID=instanceId;\r\n\t");
            
            #line 200 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(AbstractCustomVariable customVariable in workflow.CustomVariables) {
            
            #line default
            #line hidden
            this.Write("\t\tthis.");
            
            #line 201 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write("=");
            
            #line 201 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t");
            
            #line 202 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\r\n\t\tpublic long InstanceID{get;set;}\r\n\t\t");
            
            #line 206 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(AbstractCustomVariable customVariable in workflow.CustomVariables) {
            
            #line default
            #line hidden
            
            #line 207 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"

            string typeName = "";
            string typeDeclaration = "";
	        switch(customVariable.VariableType)
            {
                case CustomVariableTypeEnum.Bool:
                    typeName = "Boolean";
                    break;
                case CustomVariableTypeEnum.BigInteger:
                    typeName = "Int64";
                    break;
                case CustomVariableTypeEnum.DateTime:
                    typeName = "DateTime";
                    break;
                case CustomVariableTypeEnum.Decimal:
                    typeName = "Decimal";
                    break;
                case CustomVariableTypeEnum.Double:
                    typeName = "Double";
                    break;
                case CustomVariableTypeEnum.Integer:
                    typeName = "Int32";
                    break;
                case CustomVariableTypeEnum.Single:
                    typeName = "Single";
                    break;
                case CustomVariableTypeEnum.String:
                    typeName = "String";
                    break;
                case CustomVariableTypeEnum.Text:
                    typeName = "String";
                    break;
            }

            
            #line default
            #line hidden
            this.Write("public ");
            
            #line 240 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 240 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write("{get;set;}\r\n");
            
            #line 241 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\t\tpublic string GetStatement()\r\n\t\t{\r\n\t\t\t");
            
            #line 245 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
string SQL = "select InstanceId, ";
			foreach(AbstractCustomVariable customVariable in workflow.CustomVariables) 
			{
				SQL = string.Format("{0} {1},", SQL, customVariable.SafeName);
			}
			SQL=SQL.Remove(SQL.Length-1,1);
			
            
            #line default
            #line hidden
            this.Write("string sql = \"");
            
            #line 251 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SQL));
            
            #line default
            #line hidden
            this.Write(" from x2.x2data.");
            
            #line 251 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write(" where instanceId=@InstanceID\";\r\n\t\t\treturn sql;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tpublic class X2");
            
            #line 257 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data : MarshalByRefObject, IX2");
            
            #line 257 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data\r\n\t{\r\n\t\tprivate bool m_HasChanges = false;\r\n\t\tprivate Dictionary<string, str" +
                    "ing> m_dataFields;\r\n\t\tpublic long InstanceId{get; protected set;}\r\n\t\tpublic X2");
            
            #line 262 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data()\r\n\t\t{\r\n\t\t\tDbContextConfiguration.Instance.RepositoryFactory.UIStatementPro" +
                    "vider.Add(new UIStatements());\r\n\t\t}\r\n\r\n\t\tpublic X2");
            
            #line 267 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data(long instanceId):this()\r\n\t\t{\r\n\t\t\tthis.InstanceId=instanceId;\r\n\t\t\tthis.m_dat" +
                    "aFields = new Dictionary<string, string>();\r\n");
            
            #line 271 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){
            
            #line default
            #line hidden
            this.Write("\t\t\tthis.m_dataFields.Add(\"");
            
            #line 272 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName.ToLower()));
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 272 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SqlDataTypeFromCustomVariableType(customVariable.VariableType)));
            
            #line default
            #line hidden
            this.Write("\");\r\n");
            
            #line 273 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tpublic override object InitializeLifetimeService()\r\n\t\t{\r\n\t\t\tretur" +
                    "n null;\r\n\t\t}\r\n");
            
            #line 280 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables)
        {
            
            #line default
            #line hidden
            
            #line 282 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"

            string typeName = "";
            string typeDeclaration = "";
	        switch(customVariable.VariableType)
            {
                case CustomVariableTypeEnum.Bool:
                    typeName = "Boolean";
                    break;
                case CustomVariableTypeEnum.BigInteger:
                    typeName = "Int64";
                    break;
                case CustomVariableTypeEnum.DateTime:
                    typeName = "DateTime";
                    break;
                case CustomVariableTypeEnum.Decimal:
                    typeName = "Decimal";
                    break;
                case CustomVariableTypeEnum.Double:
                    typeName = "Double";
                    break;
                case CustomVariableTypeEnum.Integer:
                    typeName = "Int32";
                    break;
                case CustomVariableTypeEnum.Single:
                    typeName = "Single";
                    break;
                case CustomVariableTypeEnum.String:
                    typeName = "String";
                    break;
                case CustomVariableTypeEnum.Text:
                    typeName = "String";
                    break;
            }

            
            #line default
            #line hidden
            this.Write("\t\r\n");
            
            #line 316 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            if(customVariable.VariableType == CustomVariableTypeEnum.DateTime){
            
            #line default
            #line hidden
            this.Write("\t\tprivate ");
            
            #line 317 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeName));
            
            #line default
            #line hidden
            this.Write(" m_");
            
            #line 317 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(" = System.DateTime.Now;\r\n");
            
            #line 318 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            }else{
            
            #line default
            #line hidden
            this.Write("\t\tprivate ");
            
            #line 319 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeName));
            
            #line default
            #line hidden
            this.Write(" m_");
            
            #line 319 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 320 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            }
            
            #line default
            #line hidden
            this.Write("\t\tpublic ");
            
            #line 321 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 321 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\treturn m_");
            
            #line 325 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t}\r\n\t\t\tset\r\n\t\t\t{\r\n\t\t\t\tm_HasChanges = true;\r\n\t\t\t\tm_");
            
            #line 330 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(" = value;\r\n\t\t\t}\r\n\t\t}\r\n");
            
            #line 333 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
        }
            
            #line default
            #line hidden
            this.Write("\t\r\n\t\t#region IX2WorkFlowDataProvider Members\r\n\r\n\t\tpublic void LoadData(long insta" +
                    "nceId)\r\n\t\t{\r\n\t\t\tusing (var db = new Db().InWorkflowContext())\r\n            {\r\n\t\t" +
                    "\t    var workflowData = db.SelectOne<X2");
            
            #line 341 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data>(new X2");
            
            #line 341 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("SqlStatement(instanceId,");
            
            #line 341 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
string sql = "";
			foreach(AbstractCustomVariable customVariable in workflow.CustomVariables) 
			{
				sql = string.Format("{0} {1},", sql, customVariable.SafeName);
			}
			sql=sql.Remove(sql.Length-1,1);
            
            #line default
            #line hidden
            
            #line 346 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sql));
            
            #line default
            #line hidden
            this.Write(@"));
				SetProperties(workflowData);
				db.Complete();
            }
		}

		public void InsertData(long instanceId, System.Collections.Generic.Dictionary<string, string> Fields)
		{
			using (var db = new Db().InWorkflowContext())
            {
				SetMapVariables(Fields);
				db.Insert<X2");
            
            #line 357 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data>(this);\r\n\t\t\t\tdb.Complete();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic void SaveData(long insta" +
                    "nceId)\r\n\t\t{\r\n\t\t\tusing (var db = new Db().InWorkflowContext())\r\n            {\r\n\t\t" +
                    "\t\tdb.Update<X2");
            
            #line 366 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write(@"_Data>(this);
				db.Complete();
			}
		}

		public void SetMapVariables(System.Collections.Generic.Dictionary<string, string> Fields)
		{
			if (Fields != null)
			{
				string[] Keys = new string[Fields.Count];
				Fields.Keys.CopyTo(Keys, 0);
				for (int i = 0; i < Fields.Count; i++)
				{
					switch (Keys[i].ToLower())
					{
");
            
            #line 381 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tcase \"");
            
            #line 382 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName.ToLower()));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\t\t\t");
            
            #line 383 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(" = Convert.");
            
            #line 383 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ConvertStringFromCustomVariableType(customVariable.VariableType)));
            
            #line default
            #line hidden
            this.Write("(Fields[Keys[i]]);\r\n\t\t\t\t\t\t\tbreak;\r\n");
            
            #line 385 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
        }
            
            #line default
            #line hidden
            this.Write(@"					}
				}
			}
		}

		public void SetProperties(object setPropertiesFromObject)
           {
                foreach (var property in setPropertiesFromObject.GetType().GetProperties())
                {
                     var propertyToSet = this.GetType().GetProperty(property.Name);
					 if (property.Name != ""DataFields"" && propertyToSet.SetMethod != null)
					 {
						 if (propertyToSet != null)
						 {
							   propertyToSet.SetValue(this, property.GetValue(setPropertiesFromObject));
						 }
					}
                }
           }

		public Dictionary<string, string> GetData()
		{
			Dictionary<string, string> Data = new Dictionary<string, string>();
");
            
            #line 409 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){
            
            #line default
            #line hidden
            
            #line 410 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
if(this.RequiresNullCheck(customVariable.VariableType)){
            
            #line default
            #line hidden
            this.Write("\t\t\tif(m_");
            
            #line 411 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(" != null)\r\n\t\t\t\tData.Add( \"");
            
            #line 412 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName.ToLower()));
            
            #line default
            #line hidden
            this.Write("\", m_");
            
            #line 412 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(".ToString());\r\n");
            
            #line 413 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}else{
            
            #line default
            #line hidden
            this.Write("\t\t\tData.Add( \"");
            
            #line 414 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName.ToLower()));
            
            #line default
            #line hidden
            this.Write("\", m_");
            
            #line 414 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(".ToString());\r\n");
            
            #line 415 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            
            #line 416 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\treturn Data;\r\n\t\t}\r\n\t\t\r\n\t\tpublic void SetDataField(string FieldName, object val" +
                    "ue)\r\n\t\t{\r\n\t\t\tswitch (FieldName.ToLower())\r\n\t\t\t{\t\t\r\n");
            
            #line 424 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tcase \"");
            
            #line 425 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName.ToLower()));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\t\t\t");
            
            #line 426 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(" = Convert.");
            
            #line 426 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ConvertStringFromCustomVariableType(customVariable.VariableType)));
            
            #line default
            #line hidden
            this.Write("(value);\r\n\t\t\t\t\t\t\tbreak;\r\n");
            
            #line 428 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
        }
            
            #line default
            #line hidden
            this.Write("\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic object GetDataField(string FieldName)\r\n\t\t{\r\n\t\t\tswitch (Fi" +
                    "eldName.ToLower())\r\n\t\t\t{\r\n");
            
            #line 436 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase \"");
            
            #line 437 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName.ToLower()));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\treturn m_");
            
            #line 438 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 439 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic Dictionary<string, " +
                    "string> DataFields\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\treturn m_dataFields;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n" +
                    "\t\tpublic string DataProviderName\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\treturn \"");
            
            #line 457 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic bool HasChanges\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\treturn m_HasC" +
                    "hanges;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic bool Contains(string FieldName)\r\n\t\t{\r\n\t\t\tswitch" +
                    " (FieldName.ToLower())\r\n\t\t\t{\r\n");
            
            #line 473 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase \"");
            
            #line 474 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName.ToLower()));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\treturn true;\r\n");
            
            #line 476 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\r\n\t#endregion\r\n}\r\n\r\n\t#end" +
                    "region\t\r\n\r\n\t#region WorkFlow ");
            
            #line 489 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\tpublic class X2");
            
            #line 491 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write(" : MarshalByRefObject, IX2Map\r\n\t{\r\n\t\tSAHL.Core.X2.Logging.IX2Logging x2logger;\r\n\t" +
                    "\tSAHL.Core.Logging.ILogger logger;\r\n\t\tSAHL.Core.Logging.ILoggerSource loggerSour" +
                    "ce;\r\n\t\t\r\n\t\tpublic X2");
            
            #line 497 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write(@"()
		{
		    this.logger=ObjectFactory.GetInstance<SAHL.Core.Logging.ILogger>();
			this.x2logger=ObjectFactory.GetInstance<SAHL.Core.X2.Logging.IX2Logging>();
			this.loggerSource=ObjectFactory.GetInstance<SAHL.Core.Logging.ILoggerSource>();
		}
		
		#region States
");
            
            #line 505 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(AbstractNamedState state in workflow.States){
foreach(CodeSection codeSection	in state.AllCodeSections)
{
string[] codeLines = codeSection.Code.Split(new String[]{"\r\n"}, StringSplitOptions.RemoveEmptyEntries);
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 510 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(string line in codeLines){
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 511 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(line));
            
            #line default
            #line hidden
            
            #line 511 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("\r\n"));
            
            #line default
            #line hidden
            
            #line 511 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}}
            
            #line default
            #line hidden
            
            #line 512 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\t\t#endregion\r\n\r\n\t\t#region Activities\r\n");
            
            #line 517 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(AbstractActivity activity in workflow.Activities){
foreach(CodeSection codeSection	in activity.AllCodeSections)
{
string[] codeLines = codeSection.Code.Split(new String[]{"\r\n"}, StringSplitOptions.RemoveEmptyEntries);
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 522 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(string line in codeLines){
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 523 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(line));
            
            #line default
            #line hidden
            
            #line 523 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("\r\n"));
            
            #line default
            #line hidden
            
            #line 523 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}}
            
            #line default
            #line hidden
            
            #line 524 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\t\t#endregion\r\n\r\n\t\t#region Roles\r\n");
            
            #line 529 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"

foreach(AbstractRole role in workflow.Roles){
foreach(CodeSection codeSection	in role.AllCodeSections)
{
string[] codeLines = codeSection.Code.Split(new String[]{"\r\n"}, StringSplitOptions.RemoveEmptyEntries);
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 535 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(string line in codeLines){
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 536 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(line));
            
            #line default
            #line hidden
            
            #line 536 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("\r\n"));
            
            #line default
            #line hidden
            
            #line 536 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}}
            
            #line default
            #line hidden
            
            #line 537 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write(@"
		#endregion

		#region IX2Map Members

		[CoverageExcludeAttribute]
		public bool EnterState(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			x2logger.LogOnEnterWorkflow( ""OnEnterState"", contextualData, instance, param, null);
			try
			{
				Func<bool> internalMethod = () =>
				{
					return this.OnEnterStateInternal(instance, contextualData, param, messages);
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, """);
            
            #line 554 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write(@""" }, { Logger.X2InstanceData, instance }, { Logger.X2Parameters, param } };
				var returnData = logger.LogMethodMetric(this.loggerSource,""X2MAP"",""OnEnterState"",internalMethod, metricParameters);
				logger.LogThroughputMetric(this.loggerSource,""X2MAP"",""OnEnterState"",metricParameters);
				x2logger.LogOnWorkflowSuccess( ""OnEnterState"", contextualData, instance, param);
				return returnData;
			}
			catch(Exception exception)
			{
				x2logger.LogOnWorkflowException(""OnEnterState"", instance.ID, exception);
				if (messages.AllMessages.Count() == 0)
                {
                    // add an error message to the message collection so that X2 will definately not continue, ONLY if there are not already messages.
                    messages.AddMessage(new SAHL.Core.SystemMessages.SystemMessage(String.Format(""A serious internal error has occurred and workflow processing was aborted.{0}"", exception.ToString()), SAHL.Core.SystemMessages.SystemMessageSeverityEnum.Error));
                }
				return false;
				//throw;
			}
			finally
			{
				x2logger.LogOnExitWorkflow( ""OnEnterState"", instance.ID);
			}
		}

		[CoverageExcludeAttribute]
		public bool OnEnterStateInternal(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			switch(param.StateName)
			{
");
            
            #line 582 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(AbstractNamedState state in workflow.States)
{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase \"");
            
            #line 584 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(state.Name));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\treturn OnEnter_");
            
            #line 585 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(state.SafeName));
            
            #line default
            #line hidden
            this.Write("(instance, (IX2");
            
            #line 585 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data)contextualData, param, messages);\r\n");
            
            #line 586 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write(@"					
				default:
					return false;
			}
		}

		[CoverageExcludeAttribute]
		public bool ExitState(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			x2logger.LogOnEnterWorkflow( ""OnExitState"", contextualData, instance, param, null);
			try
			{
				Func<bool>  internalMethod = () =>
				{
					return this.OnExitStateInternal(instance, contextualData, param, messages);
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, """);
            
            #line 603 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write(@""" }, { Logger.X2InstanceData, instance }, { Logger.X2Parameters, param } };
				var returnData = logger.LogMethodMetric(this.loggerSource,""X2MAP"",""OnExitState"",internalMethod, metricParameters);
				logger.LogThroughputMetric(this.loggerSource,""X2MAP"",""OnExitState"",metricParameters);
				x2logger.LogOnWorkflowSuccess( ""OnExitState"", contextualData, instance, param);
				return returnData;
			}
			catch(Exception exception)
			{
				x2logger.LogOnWorkflowException( ""OnExitState"", instance.ID, exception);
				if (messages.AllMessages.Count() == 0)
                {
                    // add an error message to the message collection so that X2 will definately not continue, ONLY if there are not already messages.
                    messages.AddMessage(new SAHL.Core.SystemMessages.SystemMessage(String.Format(""A serious internal error has occurred and workflow processing was aborted.{0}"", exception.ToString()), SAHL.Core.SystemMessages.SystemMessageSeverityEnum.Error));
                }
				return false;
				//throw;
			}
			finally
			{
				x2logger.LogOnExitWorkflow( ""OnExitState"", instance.ID);
			}
		}

		[CoverageExcludeAttribute]
		public bool OnExitStateInternal(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			switch(param.StateName)
			{
");
            
            #line 631 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(AbstractNamedState state in workflow.States)
{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase \"");
            
            #line 633 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(state.Name));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\treturn OnExit_");
            
            #line 634 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(state.SafeName));
            
            #line default
            #line hidden
            this.Write("(instance, (IX2");
            
            #line 634 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data)contextualData, param, messages);\r\n");
            
            #line 635 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write(@"								
				default:
					return false;
			}
		}

		[CoverageExcludeAttribute]
		public bool OnReturnState(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			x2logger.LogOnEnterWorkflow( ""OnReturnState"", contextualData, instance, param, null);
			try
			{
				Func<bool> internalMethod = () =>
				{
					return this.OnReturnStateInternal(instance, contextualData, param, messages);
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, """);
            
            #line 652 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write(@""" }, { Logger.X2InstanceData, instance }, { Logger.X2Parameters, param } };
				var returnData = logger.LogMethodMetric(this.loggerSource,""X2MAP"",""OnReturnState"",internalMethod, metricParameters);
				logger.LogThroughputMetric(this.loggerSource,""X2MAP"",""OnReturnState"",metricParameters);
				x2logger.LogOnWorkflowSuccess( ""OnReturnState"", contextualData, instance, param);
				return returnData;
			}
			catch(Exception exception)
			{
				x2logger.LogOnWorkflowException( ""OnReturnState"", instance.ID, exception);
				return false;
				//throw;
			}
			finally
			{
				x2logger.LogOnExitWorkflow( ""OnReturnState"", instance.ID);
			}
		}

		[CoverageExcludeAttribute]
		public bool OnReturnStateInternal(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			switch(param.StateName)
			{
");
            
            #line 675 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(ArchiveState state in workflow.ArchiveStates)
{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase \"");
            
            #line 677 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(state.Name));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\treturn OnReturn_");
            
            #line 678 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(state.SafeName));
            
            #line default
            #line hidden
            this.Write("(instance,(IX2");
            
            #line 678 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data)contextualData, param, messages);\r\n");
            
            #line 679 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write(@"	
					default: 
						return false;
				}
			}

		[CoverageExcludeAttribute]
		public string GetForwardStateName(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			x2logger.LogOnEnterWorkflow( ""GetForwardStateName"", contextualData, instance, param, null);
			try
			{
				Func<string> internalMethod = () =>
				{
					return this.GetForwardStateNameInternal(instance, contextualData, param, messages);
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, """);
            
            #line 696 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write(@""" }, { Logger.X2InstanceData, instance }, { Logger.X2Parameters, param } };
				var returnData = logger.LogMethodMetric(this.loggerSource,""X2MAP"",""GetForwardStateName"",internalMethod, metricParameters);
				logger.LogThroughputMetric(this.loggerSource,""X2MAP"",""GetForwardStateName"",metricParameters);
				x2logger.LogOnWorkflowSuccess( ""GetForwardStateName"", contextualData, instance, param);
				return returnData;
			}
			catch(Exception exception)
			{
				x2logger.LogOnWorkflowException( ""GetForwardStateName"", instance.ID, exception);
				return string.Empty;
				//throw;
			}
			finally
			{
				x2logger.LogOnExitWorkflow( ""GetForwardStateName"", instance.ID);
			}
		}

		[CoverageExcludeAttribute]
		public string GetForwardStateNameInternal(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			switch(param.StateName)
			{
");
            
            #line 719 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(SystemState state in workflow.AutoForwardStates)
{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase \"");
            
            #line 721 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(state.Name));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\treturn GetForwardStateName_");
            
            #line 722 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(state.SafeName));
            
            #line default
            #line hidden
            this.Write("(instance, (IX2");
            
            #line 722 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data)contextualData, param, messages);\r\n");
            
            #line 723 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write(@"				
				default:
					return string.Empty;
			}
		}

		[CoverageExcludeAttribute]
		public bool StartActivity(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			x2logger.LogOnEnterWorkflow( ""OnStartActivity"", contextualData, instance, param, null);
			try
			{

				Func<bool> internalMethod = () =>
				{
					return this.OnStartActivityInternal(instance, contextualData, param, messages);
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, """);
            
            #line 741 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write(@""" }, { Logger.X2InstanceData, instance }, { Logger.X2Parameters, param } };
				var returnData = logger.LogMethodMetric(this.loggerSource,""X2MAP"",""OnStartActivity"",internalMethod, metricParameters);
				logger.LogThroughputMetric(this.loggerSource,""X2MAP"",""OnStartActivity"",metricParameters);
				x2logger.LogOnWorkflowSuccess( ""OnStartActivity"", contextualData, instance, param);
				return returnData;
			}
			catch(Exception exception)
			{
				x2logger.LogOnWorkflowException( ""OnStartActivity"", instance.ID, exception);
				if (messages.AllMessages.Count() == 0)
                {
                    // add an error message to the message collection so that X2 will definately not continue, ONLY if there are not already messages.
                    messages.AddMessage(new SAHL.Core.SystemMessages.SystemMessage(String.Format(""A serious internal error has occurred and workflow processing was aborted.{0}"", exception.ToString()), SAHL.Core.SystemMessages.SystemMessageSeverityEnum.Error));
                }
				return false;
				//throw;
			}
			finally
			{
				x2logger.LogOnExitWorkflow( ""OnStartActivity"", instance.ID);
			}
		}

		[CoverageExcludeAttribute]
		public bool OnStartActivityInternal(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			switch(param.ActivityName)
			{
");
            
            #line 769 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(AbstractActivity activity in workflow.Activities)
{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase \"");
            
            #line 771 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(activity.Name));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\treturn OnStartActivity_");
            
            #line 772 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(activity.SafeName));
            
            #line default
            #line hidden
            this.Write("(instance, (IX2");
            
            #line 772 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data)contextualData, param, messages);\r\n");
            
            #line 773 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write(@"				
				default:
					return false;
			}
		}

		[CoverageExcludeAttribute]
		public bool CompleteActivity(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages, ref string AlertMessage)
		{
			x2logger.LogOnEnterWorkflow( ""OnCompleteActivity"", contextualData, instance, param, new Dictionary<string, object>()  { {""AlertMessage"", AlertMessage} } );
			try
			{
				logger.GetThreadLocalStore()[SAHL.Core.Logging.Logger.X2InstanceId] = instance.ID;
                logger.GetThreadLocalStore()[SAHL.Core.Logging.Logger.X2WorkflowName] = param.WorkflowName;
                logger.GetThreadLocalStore()[SAHL.Core.Logging.Logger.X2InstanceData] = param;
                logger.GetThreadLocalStore()[SAHL.Core.Logging.Logger.X2ActivityName] = param.ActivityName;


				Func<Tuple<bool, string>> internalMethod = () =>
				{
					bool item1 = false;
					string item2 = string.Empty;
					item1 = this.OnCompleteActivityInternal(instance, contextualData, param, messages, ref item2);
					Tuple<bool, string> values = new Tuple<bool,string>(item1,item2);
					return values;
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, """);
            
            #line 800 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("\" }, { Logger.X2InstanceData, instance }, { Logger.X2Parameters, param} };\r\n\t\t\t\tv" +
                    "ar returnData = logger.LogMethodMetric(this.loggerSource,\"X2MAP\",\"OnCompleteActi" +
                    "vity\",internalMethod, metricParameters);\r\n\t\t\t\tif (!string.IsNullOrEmpty(returnDa" +
                    "ta.Item2))\r\n\t\t\t\t{\r\n\t\t\t\t\tAlertMessage = returnData.Item2;\r\n\t\t\t\t}\r\n\t\t\t\tAlertMessag" +
                    "e = returnData.Item2;\r\n\t\t\t\tlogger.LogThroughputMetric(this.loggerSource,\"X2MAP\"," +
                    "\"OnCompleteActivity\",metricParameters);\r\n\t\t\t\tx2logger.LogOnWorkflowSuccess( \"OnC" +
                    "ompleteActivity\", contextualData, instance, param);\r\n\t\t\t\treturn returnData.Item1" +
                    ";\r\n\t\t\t}\r\n\t\t\tcatch(Exception exception)\r\n\t\t\t{\r\n\t\t\t\tx2logger.LogOnWorkflowExceptio" +
                    "n( \"OnCompleteActivity\", instance.ID, exception);\r\n\t\t\t\tif (messages.AllMessages." +
                    "Count() == 0)\r\n                {\r\n                    // add an error message to" +
                    " the message collection so that X2 will definately not continue, ONLY if there a" +
                    "re not already messages.\r\n                    messages.AddMessage(new SAHL.Core." +
                    "SystemMessages.SystemMessage(String.Format(\"A serious internal error has occurre" +
                    "d and workflow processing was aborted.{0}\", exception.ToString()), SAHL.Core.Sys" +
                    "temMessages.SystemMessageSeverityEnum.Error));\r\n                }\r\n\t\t\t\treturn fa" +
                    "lse;\r\n\t\t\t\t//throw;\r\n\t\t\t}\r\n\t\t\tfinally\r\n\t\t\t{\r\n\t\t\t\tx2logger.LogOnExitWorkflow( \"OnC" +
                    "ompleteActivity\", instance.ID);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t[CoverageExcludeAttribute]\r\n\t\tpu" +
                    "blic bool OnCompleteActivityInternal(InstanceDataModel instance, IX2ContextualDa" +
                    "taProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollectio" +
                    "n messages, ref string AlertMessage)\r\n\t\t{\r\n\t\t\tswitch(param.ActivityName)\r\n\t\t\t{\r\n" +
                    "");
            
            #line 833 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(AbstractActivity activity in workflow.Activities)
{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase \"");
            
            #line 835 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(activity.Name));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\treturn OnCompleteActivity_");
            
            #line 836 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(activity.SafeName));
            
            #line default
            #line hidden
            this.Write("(instance, (IX2");
            
            #line 836 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data)contextualData, param, messages, ref AlertMessage);\r\n");
            
            #line 837 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write(@"				
				default:
					return false;
			}
		}

		[CoverageExcludeAttribute]
		public DateTime GetActivityTime(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			x2logger.LogOnEnterWorkflow( ""GetActivityTime"", contextualData, instance, param, null);
			try
			{
				
				Func<DateTime> internalMethod = () =>
				{
					return this.GetActivityTimeInternal(instance, contextualData, param, messages);
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, """);
            
            #line 855 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write(@""" }, { Logger.X2InstanceData, instance }, { Logger.X2Parameters, param } };
				var returnData = logger.LogMethodMetric(this.loggerSource,""X2MAP"",""GetActivityTime"",internalMethod, metricParameters);
				logger.LogThroughputMetric(this.loggerSource,""X2MAP"",""GetActivityTime"",metricParameters);
				x2logger.LogOnWorkflowSuccess( ""GetActivityTime"", contextualData, instance, param);
				return returnData;
			}
			catch(Exception exception)
			{
				x2logger.LogOnWorkflowException( ""GetActivityTime"", instance.ID, exception);
				if (messages.AllMessages.Count() == 0)
                {
                    // add an error message to the message collection so that X2 will definately not continue, ONLY if there are not already messages.
                    messages.AddMessage(new SAHL.Core.SystemMessages.SystemMessage(String.Format(""A serious internal error has occurred and workflow processing was aborted.{0}"", exception.ToString()), SAHL.Core.SystemMessages.SystemMessageSeverityEnum.Error));
                }
				return DateTime.Now;
				//throw;
			}
			finally
			{
				x2logger.LogOnExitWorkflow( ""GetActivityTime"", instance.ID);
			}
		}

		[CoverageExcludeAttribute]
		public DateTime GetActivityTimeInternal(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			switch(param.ActivityName)
			{
");
            
            #line 883 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(TimedActivity activity in workflow.TimedActivities)
{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase \"");
            
            #line 885 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(activity.Name));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\treturn GetActivityTime_");
            
            #line 886 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(activity.SafeName));
            
            #line default
            #line hidden
            this.Write("(instance, (IX2");
            
            #line 886 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data)contextualData, param, messages);\r\n");
            
            #line 887 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write(@"					
				default:
					return DateTime.Now;
			}
		}

		[CoverageExcludeAttribute]
		public string GetStageTransition(InstanceDataModel instance, IX2ContextualDataProvider contextualData,SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			x2logger.LogOnEnterWorkflow( ""GetStageTransition"", contextualData, instance, param, null);
			try
			{
				Func<string> internalMethod = () =>
				{
					return this.GetStageTransitionInternal(contextualData, instance,  param, messages);
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, """);
            
            #line 904 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write(@""" }, { Logger.X2InstanceData, instance }, { Logger.X2Parameters, param } };
				var returnData = logger.LogMethodMetric(this.loggerSource,""X2MAP"",""GetStageTransition"",internalMethod, metricParameters);
				logger.LogThroughputMetric(this.loggerSource,""X2MAP"",""GetStageTransition"",metricParameters);
				x2logger.LogOnWorkflowSuccess( ""GetStageTransition"", contextualData,instance, param);
				return returnData;
			}
			catch(Exception exception)
			{
				x2logger.LogOnWorkflowException( ""GetStageTransition"", instance.ID, exception);
				return string.Empty;
				//throw;
			}
			finally
			{
				x2logger.LogOnExitWorkflow( ""GetStageTransition"", instance.ID);
			}
		}

		[CoverageExcludeAttribute]
		public string GetStageTransitionInternal(IX2ContextualDataProvider contextualData, InstanceDataModel instance, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			switch(param.ActivityName)
			{
");
            
            #line 927 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(AbstractActivity activity in workflow.ActivitiesWithStageTransitions)
{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase \"");
            
            #line 929 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(activity.Name));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\treturn GetStageTransition_");
            
            #line 930 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(activity.SafeName));
            
            #line default
            #line hidden
            this.Write("(instance, (IX2");
            
            #line 930 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data)contextualData, param, messages);\r\n");
            
            #line 931 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write(@"						
				default:
					return string.Empty;
			}
		}

		[CoverageExcludeAttribute]
		public string GetActivityMessage(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			x2logger.LogOnEnterWorkflow( ""GetActivityMessage"", contextualData, instance, param, null);
			try
			{
				Func<string> internalMethod = () =>
				{
					return this.GetActivityMessageInternal(instance, contextualData, param, messages);
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, """);
            
            #line 948 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write(@""" }, { Logger.X2InstanceData, instance }, { Logger.X2Parameters, param} };
				var returnData = logger.LogMethodMetric(this.loggerSource,""X2MAP"",""GetActivityMessage"",internalMethod, metricParameters);
				logger.LogThroughputMetric(this.loggerSource,""X2MAP"",""GetActivityMessage"",metricParameters);
				x2logger.LogOnWorkflowSuccess( ""GetActivityMessage"", contextualData, instance, param);
				return returnData;
			}
			catch(Exception exception)
			{
				x2logger.LogOnWorkflowException( ""GetActivityMessage"", instance.ID, exception);
				return string.Empty;
				//throw;
			}
			finally
			{
				x2logger.LogOnExitWorkflow( ""GetActivityMessage"", instance.ID);
			}
		}

		[CoverageExcludeAttribute]
		public string GetActivityMessageInternal(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			switch(param.ActivityName)
			{
");
            
            #line 971 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(AbstractActivity activity in workflow.UserActivities)
{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase \"");
            
            #line 973 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(activity.Name));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\treturn GetActivityMessage_");
            
            #line 974 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(activity.SafeName));
            
            #line default
            #line hidden
            this.Write("(instance, (IX2");
            
            #line 974 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data)contextualData, param, messages);\r\n");
            
            #line 975 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write(@"					
				default:
					return string.Empty;
			}
		}

		[CoverageExcludeAttribute]
		public string GetDynamicRole(InstanceDataModel instance, IX2ContextualDataProvider contextualData, string roleName, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			x2logger.LogOnEnterWorkflow( ""GetDynamicRole"", contextualData, instance, param, new Dictionary<string, object>() { {""RoleName"", roleName} ,{ ""WorkflowName"", param.WorkflowName}});
			try
			{
				Func<string> internalMethod = () =>
				{
					return this.GetDynamicRoleInternal(instance, contextualData, roleName, param, messages);
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, """);
            
            #line 992 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write(@""" }, { Logger.X2InstanceData, instance }};
				var returnData = logger.LogMethodMetric(this.loggerSource,""X2MAP"",""GetDynamicRole"",internalMethod, metricParameters);
				logger.LogThroughputMetric(this.loggerSource,""X2MAP"",""GetDynamicRole"",metricParameters);
				x2logger.LogOnWorkflowSuccess( ""GetDynamicRole"", contextualData, instance, null);
				return returnData;
			}
			catch(Exception exception)
			{
				x2logger.LogOnWorkflowException( ""GetDynamicRole"", instance.ID, exception);
				return string.Empty;
				//throw;
			}
			finally
			{
				x2logger.LogOnExitWorkflow( ""GetDynamicRole"", instance.ID);
			}
		}

		[CoverageExcludeAttribute]
		public string GetDynamicRoleInternal(InstanceDataModel instance, IX2ContextualDataProvider contextualData,  string roleName, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			switch(roleName.Replace(' ', '_')+""_""+param.WorkflowName.Replace(' ', '_'))
			{
");
            
            #line 1015 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
foreach(WorkflowRole role in workflow.DynamicRoles)
{
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase \"");
            
            #line 1017 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(role.SafeName));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 1017 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\treturn OnGetRole_");
            
            #line 1018 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 1018 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(role.SafeName));
            
            #line default
            #line hidden
            this.Write("(instance, (IX2");
            
            #line 1018 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data)contextualData,roleName , param, messages);\r\n");
            
            #line 1019 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn string.Empty;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t[CoverageExcludeAtt" +
                    "ribute]\r\n\t\tpublic IX2ContextualDataProvider GetContextualData(long instanceId)\r\n" +
                    "\t\t{\r\n\t\t\treturn new X2");
            
            #line 1028 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data(instanceId);\r\n\t\t}\r\n\r\n\t\t#endregion\r\n\t}\r\n\r\n\t#endregion\r\n\t\r\n");
            
            #line 1036 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
}
            
            #line default
            #line hidden
            this.Write("\tpublic partial class UIStatements : IUIStatementsProvider\r\n    {\r\n\t\tpublic strin" +
                    "g UIStatementContext\r\n\t\t{\r\n\t\t\tget { return \"");
            
            #line 1041 "F:\git\dev-g\Tools\Workflow\src\SAHL.Tools.Workflow.Common\Templates\X2Process.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(process.SafeName));
            
            #line default
            #line hidden
            this.Write("\";/*Name of the actual process*/ }\r\n\t\t}\r\n\t}\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class X2ProcessBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
