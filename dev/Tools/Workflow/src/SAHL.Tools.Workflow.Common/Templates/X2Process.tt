<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="SAHL.Tools.Workflow.Common.WorkflowElements" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
using System.IO;
using System.Reflection;
using SAHL.Core.Logging;
using SAHL.Core.X2.Logging;
using System;
using System.Data;
using System.Xml;
using System.Linq;
using SAHL.Core;
using SAHL.Core.Data;
using SAHL.Core.Data.Context.Configuration;
using SAHL.Core.Data.Models.X2;
using SAHL.Core.Logging;
using SAHL.Core.SystemMessages;
using SAHL.Core.X2;
using SAHL.Core.X2.Providers;
using Newtonsoft.Json;
using SAHL.Core.Attributes;
using SAHL.Core.BusinessModel.Enums;
using SAHL.Core.Identity;
using SAHL.Core.Services;
using StructureMap;
using SAHL.Workflow.Maps.Config;

<# foreach(UsingStatement usingStatement in process.UsingStatements)
{ #>
using <#=usingStatement.Name#>;
<#}#>
namespace <#=process.SafeName#>
{

	#region Process

	public class Process : MarshalByRefObject, SAHL.Core.X2.IX2Process
	{
		SAHL.Core.X2.Logging.IX2Logging x2logger;
		SAHL.Core.Logging.ILogger logger;
		SAHL.Core.Logging.ILoggerSource loggerSource;

		public Process()
		{
		    this.logger=ObjectFactory.GetInstance<SAHL.Core.Logging.ILogger>();
			this.x2logger=ObjectFactory.GetInstance<SAHL.Core.X2.Logging.IX2Logging>();
			this.loggerSource=ObjectFactory.GetInstance<SAHL.Core.Logging.ILoggerSource>();
            var uiStatementProvider = this.GetUIStatementProvider();
			DbContextConfiguration.Instance.RepositoryFactory.UIStatementProvider.Add(uiStatementProvider);
		}
		
		public IUIStatementsProvider GetUIStatementProvider()
		{
			return new UIStatements();
		}

		public override object InitializeLifetimeService()
		{
			return null;
		}
		
		public IX2Map GetWorkflowMap(string WorkFlowName)
		{
			switch(WorkFlowName)
			{
<# foreach(Workflow workflow in process.Workflows)
{#>
				case "<#=workflow.Name#>":
					return new X2<#=workflow.SafeName#>();
<#}#>
				default:
					return null;
			}
		}
		
		public string GetDynamicRole(string RoleName)
		{
			switch(RoleName)
			{
<#foreach(GlobalRole role in process.DynamicGlobalRoles)
{#>
				case "<#=role.Name#>":
					return OnGetRole_<#=role.SafeName#>();
<#}#>
				default:
					return null;
			}
		}

		#region Process Roles

<#foreach(GlobalRole role in process.DynamicGlobalRoles){
foreach(CodeSection codeSection	in role.AllCodeSections)
{
string[] codeLines = codeSection.Code.Split(new String[]{"\n"}, StringSplitOptions.RemoveEmptyEntries);#>
<#foreach(string line in codeLines){#>
		<#=line#><#}}#>
<#}#>

		#endregion
	}
	
	#endregion
<# foreach(Workflow workflow in process.Workflows){#>	
	#region WorkFlowData <#=workflow.Name#>
	
	public interface IX2<#=workflow.SafeName#>_Data : IX2ContextualDataProvider
	{
<#foreach(AbstractCustomVariable customVariable in workflow.CustomVariables)
{#>
<#
	        string typeName = "";
            string typeDeclaration = "";
	        switch(customVariable.VariableType)
            {
                case CustomVariableTypeEnum.Bool:
                    typeName = "Boolean";
                    break;
                case CustomVariableTypeEnum.BigInteger:
                    typeName = "Int64";
                    break;
                case CustomVariableTypeEnum.DateTime:
                    typeName = "DateTime";
                    break;
                case CustomVariableTypeEnum.Decimal:
                    typeName = "Decimal";
                    break;
                case CustomVariableTypeEnum.Double:
                    typeName = "Double";
                    break;
                case CustomVariableTypeEnum.Integer:
                    typeName = "Int32";
                    break;
                case CustomVariableTypeEnum.Single:
                    typeName = "Single";
                    break;
                case CustomVariableTypeEnum.String:
                    typeName = "String";
                    break;
                case CustomVariableTypeEnum.Text:
                    typeName = "String";
                    break;
            }
#>			
		<#=typeName#> <#=customVariable.SafeName#> { get; set; }
<#}#>
	
	}
	
	public partial class UIStatements : IUIStatementsProvider
    {
		public const string x2<#=workflow.SafeName.ToLower()#>_data_insert = "insert into x2.x2data.<#=workflow.SafeName#> (InstanceID) values (@InstanceID)";
		public const string x2<#=workflow.SafeName.ToLower()#>_data_update = "update x2.x2data.<#=workflow.SafeName#> set <#string updateset = "";
			foreach(AbstractCustomVariable customVariable in workflow.CustomVariables) 
			{
				updateset = string.Format("{0}[{1}]=@{1},", updateset, customVariable.SafeName);
			}
			updateset=updateset.Remove(updateset.Length-1,1);#><#=updateset#> where InstanceID=@InstanceID";
		
	}

	public class X2<#=workflow.SafeName#>SqlStatement : ISqlStatement<X2<#=workflow.SafeName#>_Data>
	{
	<#string s = "";
	foreach(AbstractCustomVariable customVariable in workflow.CustomVariables) {#><#string typeName = "";
            string typeDeclaration = "";
	        switch(customVariable.VariableType)
            {
                case CustomVariableTypeEnum.Bool:
                    typeName = "Boolean";
                    break;
                case CustomVariableTypeEnum.BigInteger:
                    typeName = "Int64";
                    break;
                case CustomVariableTypeEnum.DateTime:
                    typeName = "DateTime";
                    break;
                case CustomVariableTypeEnum.Decimal:
                    typeName = "Decimal";
                    break;
                case CustomVariableTypeEnum.Double:
                    typeName = "Double";
                    break;
                case CustomVariableTypeEnum.Integer:
                    typeName = "Int32";
                    break;
                case CustomVariableTypeEnum.Single:
                    typeName = "Single";
                    break;
                case CustomVariableTypeEnum.String:
                    typeName = "String";
                    break;
                case CustomVariableTypeEnum.Text:
                    typeName = "String";
                    break;
            }s=s.TrimStart();s+=typeName+" "+customVariable.SafeName+",";#><#}#>public X2<#=workflow.SafeName#>SqlStatement(long instanceId, <#=s.Remove(s.Length-1,1).TrimStart().TrimEnd()#>) 
		{
			this.InstanceID=instanceId;
	<#foreach(AbstractCustomVariable customVariable in workflow.CustomVariables) {#>
		this.<#=customVariable.SafeName#>=<#=customVariable.SafeName#>;
			<#}#>
		}

		public long InstanceID{get;set;}
		<#foreach(AbstractCustomVariable customVariable in workflow.CustomVariables) {#>
<#
            string typeName = "";
            string typeDeclaration = "";
	        switch(customVariable.VariableType)
            {
                case CustomVariableTypeEnum.Bool:
                    typeName = "Boolean";
                    break;
                case CustomVariableTypeEnum.BigInteger:
                    typeName = "Int64";
                    break;
                case CustomVariableTypeEnum.DateTime:
                    typeName = "DateTime";
                    break;
                case CustomVariableTypeEnum.Decimal:
                    typeName = "Decimal";
                    break;
                case CustomVariableTypeEnum.Double:
                    typeName = "Double";
                    break;
                case CustomVariableTypeEnum.Integer:
                    typeName = "Int32";
                    break;
                case CustomVariableTypeEnum.Single:
                    typeName = "Single";
                    break;
                case CustomVariableTypeEnum.String:
                    typeName = "String";
                    break;
                case CustomVariableTypeEnum.Text:
                    typeName = "String";
                    break;
            }
#>public <#=typeName#> <#=customVariable.SafeName#>{get;set;}
<#}#>

		public string GetStatement()
		{
			<#string SQL = "select InstanceId, ";
			foreach(AbstractCustomVariable customVariable in workflow.CustomVariables) 
			{
				SQL = string.Format("{0} {1},", SQL, customVariable.SafeName);
			}
			SQL=SQL.Remove(SQL.Length-1,1);
			#>string sql = "<#=SQL#> from x2.x2data.<#=workflow.SafeName#> where instanceId=@InstanceID";
			return sql;
		}
	}


	public class X2<#=workflow.SafeName#>_Data : MarshalByRefObject, IX2<#=workflow.SafeName#>_Data
	{
		private bool m_HasChanges = false;
		private Dictionary<string, string> m_dataFields;
		public long InstanceId{get; protected set;}
		public X2<#=workflow.SafeName#>_Data()
		{
			DbContextConfiguration.Instance.RepositoryFactory.UIStatementProvider.Add(new UIStatements());
		}

		public X2<#=workflow.SafeName#>_Data(long instanceId):this()
		{
			this.InstanceId=instanceId;
			this.m_dataFields = new Dictionary<string, string>();
<#foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){#>
			this.m_dataFields.Add("<#=customVariable.SafeName.ToLower()#>", "<#=SqlDataTypeFromCustomVariableType(customVariable.VariableType)#>");
<#}#>			
		}
		
		public override object InitializeLifetimeService()
		{
			return null;
		}
<#        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables)
        {#>
<#
            string typeName = "";
            string typeDeclaration = "";
	        switch(customVariable.VariableType)
            {
                case CustomVariableTypeEnum.Bool:
                    typeName = "Boolean";
                    break;
                case CustomVariableTypeEnum.BigInteger:
                    typeName = "Int64";
                    break;
                case CustomVariableTypeEnum.DateTime:
                    typeName = "DateTime";
                    break;
                case CustomVariableTypeEnum.Decimal:
                    typeName = "Decimal";
                    break;
                case CustomVariableTypeEnum.Double:
                    typeName = "Double";
                    break;
                case CustomVariableTypeEnum.Integer:
                    typeName = "Int32";
                    break;
                case CustomVariableTypeEnum.Single:
                    typeName = "Single";
                    break;
                case CustomVariableTypeEnum.String:
                    typeName = "String";
                    break;
                case CustomVariableTypeEnum.Text:
                    typeName = "String";
                    break;
            }
#>	
<#            if(customVariable.VariableType == CustomVariableTypeEnum.DateTime){#>
		private <#=typeName#> m_<#=customVariable.SafeName#> = System.DateTime.Now;
<#            }else{#>
		private <#=typeName#> m_<#=customVariable.SafeName#>;
<#            }#>
		public <#=typeName#> <#=customVariable.SafeName#>
		{
			get
			{
				return m_<#=customVariable.SafeName#>;
			}
			set
			{
				m_HasChanges = true;
				m_<#=customVariable.SafeName#> = value;
			}
		}
<#        }#>
	
		#region IX2WorkFlowDataProvider Members

		public void LoadData(long instanceId)
		{
			using (var db = new Db().InWorkflowContext())
            {
			    var workflowData = db.SelectOne<X2<#=workflow.SafeName#>_Data>(new X2<#=workflow.SafeName#>SqlStatement(instanceId,<#string sql = "";
			foreach(AbstractCustomVariable customVariable in workflow.CustomVariables) 
			{
				sql = string.Format("{0} {1},", sql, customVariable.SafeName);
			}
			sql=sql.Remove(sql.Length-1,1);#><#=sql#>));
				SetProperties(workflowData);
				db.Complete();
            }
		}

		public void InsertData(long instanceId, System.Collections.Generic.Dictionary<string, string> Fields)
		{
			using (var db = new Db().InWorkflowContext())
            {
				SetMapVariables(Fields);
				db.Insert<X2<#=workflow.SafeName#>_Data>(this);
				db.Complete();
			}
		}

		public void SaveData(long instanceId)
		{
			using (var db = new Db().InWorkflowContext())
            {
				db.Update<X2<#=workflow.SafeName#>_Data>(this);
				db.Complete();
			}
		}

		public void SetMapVariables(System.Collections.Generic.Dictionary<string, string> Fields)
		{
			if (Fields != null)
			{
				string[] Keys = new string[Fields.Count];
				Fields.Keys.CopyTo(Keys, 0);
				for (int i = 0; i < Fields.Count; i++)
				{
					switch (Keys[i].ToLower())
					{
<#        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){#>
						case "<#=customVariable.SafeName.ToLower()#>":
							<#=customVariable.SafeName#> = Convert.<#=ConvertStringFromCustomVariableType(customVariable.VariableType)#>(Fields[Keys[i]]);
							break;
<#        }#>
					}
				}
			}
		}

		public void SetProperties(object setPropertiesFromObject)
           {
                foreach (var property in setPropertiesFromObject.GetType().GetProperties())
                {
                     var propertyToSet = this.GetType().GetProperty(property.Name);
					 if (property.Name != "DataFields" && propertyToSet.SetMethod != null)
					 {
						 if (propertyToSet != null)
						 {
							   propertyToSet.SetValue(this, property.GetValue(setPropertiesFromObject));
						 }
					}
                }
           }

		public Dictionary<string, string> GetData()
		{
			Dictionary<string, string> Data = new Dictionary<string, string>();
<#foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){#>
<#if(this.RequiresNullCheck(customVariable.VariableType)){#>
			if(m_<#=customVariable.SafeName#> != null)
				Data.Add( "<#=customVariable.SafeName.ToLower()#>", m_<#=customVariable.SafeName#>.ToString());
<#}else{#>
			Data.Add( "<#=customVariable.SafeName.ToLower()#>", m_<#=customVariable.SafeName#>.ToString());
<#}#>
<#}#>
			return Data;
		}
		
		public void SetDataField(string FieldName, object value)
		{
			switch (FieldName.ToLower())
			{		
<#        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){#>
						case "<#=customVariable.SafeName.ToLower()#>":
							<#=customVariable.SafeName#> = Convert.<#=ConvertStringFromCustomVariableType(customVariable.VariableType)#>(value);
							break;
<#        }#>
			}
		}
		
		public object GetDataField(string FieldName)
		{
			switch (FieldName.ToLower())
			{
<#        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){#>
				case "<#=customVariable.SafeName.ToLower()#>":
					return m_<#=customVariable.SafeName#>;
<#}#>			
				default:
					return null;
			}
		}
		
		public Dictionary<string, string> DataFields
		{
			get
			{
				return m_dataFields;
			}
		}
		
		public string DataProviderName
		{
			get
			{
				return "<#=workflow.SafeName#>";
			}
		}
		
		public bool HasChanges
		{
			get
			{
				return m_HasChanges;
			}
		}
		
		public bool Contains(string FieldName)
		{
			switch (FieldName.ToLower())
			{
<#        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){#>
				case "<#=customVariable.SafeName.ToLower()#>":
					return true;
<#}#>					
				default:
					return false;
			}
		}



	#endregion
}

	#endregion	

	#region WorkFlow <#=workflow.Name#>

	public class X2<#=workflow.SafeName#> : MarshalByRefObject, IX2Map
	{
		SAHL.Core.X2.Logging.IX2Logging x2logger;
		SAHL.Core.Logging.ILogger logger;
		SAHL.Core.Logging.ILoggerSource loggerSource;
		
		public X2<#=workflow.SafeName#>()
		{
		    this.logger=ObjectFactory.GetInstance<SAHL.Core.Logging.ILogger>();
			this.x2logger=ObjectFactory.GetInstance<SAHL.Core.X2.Logging.IX2Logging>();
			this.loggerSource=ObjectFactory.GetInstance<SAHL.Core.Logging.ILoggerSource>();
		}
		
		#region States
<#foreach(AbstractNamedState state in workflow.States){
foreach(CodeSection codeSection	in state.AllCodeSections)
{
string[] codeLines = codeSection.Code.Split(new String[]{"\r\n"}, StringSplitOptions.RemoveEmptyEntries);#>

<#foreach(string line in codeLines){#>
		<#=line#><#="\r\n"#><#}}#>
<#}#>

		#endregion

		#region Activities
<#foreach(AbstractActivity activity in workflow.Activities){
foreach(CodeSection codeSection	in activity.AllCodeSections)
{
string[] codeLines = codeSection.Code.Split(new String[]{"\r\n"}, StringSplitOptions.RemoveEmptyEntries);#>

<#foreach(string line in codeLines){#>
		<#=line#><#="\r\n"#><#}}#>
<#}#>

		#endregion

		#region Roles
<#
foreach(AbstractRole role in workflow.Roles){
foreach(CodeSection codeSection	in role.AllCodeSections)
{
string[] codeLines = codeSection.Code.Split(new String[]{"\r\n"}, StringSplitOptions.RemoveEmptyEntries);#>

<#foreach(string line in codeLines){#>
		<#=line#><#="\r\n"#><#}}#>
<#}#>

		#endregion

		#region IX2Map Members

		[CoverageExcludeAttribute]
		public bool EnterState(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			x2logger.LogOnEnterWorkflow( "OnEnterState", contextualData, instance, param, null);
			try
			{
				Func<bool> internalMethod = () =>
				{
					return this.OnEnterStateInternal(instance, contextualData, param, messages);
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, "<#=workflow.SafeName#>" }, { Logger.X2InstanceData, instance }, { Logger.X2Parameters, param } };
				var returnData = logger.LogMethodMetric(this.loggerSource,"X2MAP","OnEnterState",internalMethod, metricParameters);
				logger.LogThroughputMetric(this.loggerSource,"X2MAP","OnEnterState",metricParameters);
				x2logger.LogOnWorkflowSuccess( "OnEnterState", contextualData, instance, param);
				return returnData;
			}
			catch(Exception exception)
			{
				x2logger.LogOnWorkflowException("OnEnterState", instance.ID, exception);
				if (messages.AllMessages.Count() == 0)
                {
                    // add an error message to the message collection so that X2 will definately not continue, ONLY if there are not already messages.
                    messages.AddMessage(new SAHL.Core.SystemMessages.SystemMessage(String.Format("A serious internal error has occurred and workflow processing was aborted.{0}", exception.ToString()), SAHL.Core.SystemMessages.SystemMessageSeverityEnum.Error));
                }
				return false;
				//throw;
			}
			finally
			{
				x2logger.LogOnExitWorkflow( "OnEnterState", instance.ID);
			}
		}

		[CoverageExcludeAttribute]
		public bool OnEnterStateInternal(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			switch(param.StateName)
			{
<#foreach(AbstractNamedState state in workflow.States)
{#>
				case "<#=state.Name#>":
					return OnEnter_<#=state.SafeName#>(instance, (IX2<#=workflow.SafeName#>_Data)contextualData, param, messages);
<#}#>					
				default:
					return false;
			}
		}

		[CoverageExcludeAttribute]
		public bool ExitState(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			x2logger.LogOnEnterWorkflow( "OnExitState", contextualData, instance, param, null);
			try
			{
				Func<bool>  internalMethod = () =>
				{
					return this.OnExitStateInternal(instance, contextualData, param, messages);
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, "<#=workflow.SafeName#>" }, { Logger.X2InstanceData, instance }, { Logger.X2Parameters, param } };
				var returnData = logger.LogMethodMetric(this.loggerSource,"X2MAP","OnExitState",internalMethod, metricParameters);
				logger.LogThroughputMetric(this.loggerSource,"X2MAP","OnExitState",metricParameters);
				x2logger.LogOnWorkflowSuccess( "OnExitState", contextualData, instance, param);
				return returnData;
			}
			catch(Exception exception)
			{
				x2logger.LogOnWorkflowException( "OnExitState", instance.ID, exception);
				if (messages.AllMessages.Count() == 0)
                {
                    // add an error message to the message collection so that X2 will definately not continue, ONLY if there are not already messages.
                    messages.AddMessage(new SAHL.Core.SystemMessages.SystemMessage(String.Format("A serious internal error has occurred and workflow processing was aborted.{0}", exception.ToString()), SAHL.Core.SystemMessages.SystemMessageSeverityEnum.Error));
                }
				return false;
				//throw;
			}
			finally
			{
				x2logger.LogOnExitWorkflow( "OnExitState", instance.ID);
			}
		}

		[CoverageExcludeAttribute]
		public bool OnExitStateInternal(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			switch(param.StateName)
			{
<#foreach(AbstractNamedState state in workflow.States)
{#>
				case "<#=state.Name#>":
					return OnExit_<#=state.SafeName#>(instance, (IX2<#=workflow.SafeName#>_Data)contextualData, param, messages);
<#}#>								
				default:
					return false;
			}
		}

		[CoverageExcludeAttribute]
		public bool OnReturnState(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			x2logger.LogOnEnterWorkflow( "OnReturnState", contextualData, instance, param, null);
			try
			{
				Func<bool> internalMethod = () =>
				{
					return this.OnReturnStateInternal(instance, contextualData, param, messages);
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, "<#=workflow.SafeName#>" }, { Logger.X2InstanceData, instance }, { Logger.X2Parameters, param } };
				var returnData = logger.LogMethodMetric(this.loggerSource,"X2MAP","OnReturnState",internalMethod, metricParameters);
				logger.LogThroughputMetric(this.loggerSource,"X2MAP","OnReturnState",metricParameters);
				x2logger.LogOnWorkflowSuccess( "OnReturnState", contextualData, instance, param);
				return returnData;
			}
			catch(Exception exception)
			{
				x2logger.LogOnWorkflowException( "OnReturnState", instance.ID, exception);
				return false;
				//throw;
			}
			finally
			{
				x2logger.LogOnExitWorkflow( "OnReturnState", instance.ID);
			}
		}

		[CoverageExcludeAttribute]
		public bool OnReturnStateInternal(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			switch(param.StateName)
			{
<#foreach(ArchiveState state in workflow.ArchiveStates)
{#>
				case "<#=state.Name#>":
					return OnReturn_<#=state.SafeName#>(instance,(IX2<#=workflow.SafeName#>_Data)contextualData, param, messages);
<#}#>	
					default: 
						return false;
				}
			}

		[CoverageExcludeAttribute]
		public string GetForwardStateName(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			x2logger.LogOnEnterWorkflow( "GetForwardStateName", contextualData, instance, param, null);
			try
			{
				Func<string> internalMethod = () =>
				{
					return this.GetForwardStateNameInternal(instance, contextualData, param, messages);
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, "<#=workflow.SafeName#>" }, { Logger.X2InstanceData, instance }, { Logger.X2Parameters, param } };
				var returnData = logger.LogMethodMetric(this.loggerSource,"X2MAP","GetForwardStateName",internalMethod, metricParameters);
				logger.LogThroughputMetric(this.loggerSource,"X2MAP","GetForwardStateName",metricParameters);
				x2logger.LogOnWorkflowSuccess( "GetForwardStateName", contextualData, instance, param);
				return returnData;
			}
			catch(Exception exception)
			{
				x2logger.LogOnWorkflowException( "GetForwardStateName", instance.ID, exception);
				return string.Empty;
				//throw;
			}
			finally
			{
				x2logger.LogOnExitWorkflow( "GetForwardStateName", instance.ID);
			}
		}

		[CoverageExcludeAttribute]
		public string GetForwardStateNameInternal(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			switch(param.StateName)
			{
<#foreach(SystemState state in workflow.AutoForwardStates)
{#>
				case "<#=state.Name#>":
					return GetForwardStateName_<#=state.SafeName#>(instance, (IX2<#=workflow.SafeName#>_Data)contextualData, param, messages);
<#}#>				
				default:
					return string.Empty;
			}
		}

		[CoverageExcludeAttribute]
		public bool StartActivity(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			x2logger.LogOnEnterWorkflow( "OnStartActivity", contextualData, instance, param, null);
			try
			{

				Func<bool> internalMethod = () =>
				{
					return this.OnStartActivityInternal(instance, contextualData, param, messages);
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, "<#=workflow.SafeName#>" }, { Logger.X2InstanceData, instance }, { Logger.X2Parameters, param } };
				var returnData = logger.LogMethodMetric(this.loggerSource,"X2MAP","OnStartActivity",internalMethod, metricParameters);
				logger.LogThroughputMetric(this.loggerSource,"X2MAP","OnStartActivity",metricParameters);
				x2logger.LogOnWorkflowSuccess( "OnStartActivity", contextualData, instance, param);
				return returnData;
			}
			catch(Exception exception)
			{
				x2logger.LogOnWorkflowException( "OnStartActivity", instance.ID, exception);
				if (messages.AllMessages.Count() == 0)
                {
                    // add an error message to the message collection so that X2 will definately not continue, ONLY if there are not already messages.
                    messages.AddMessage(new SAHL.Core.SystemMessages.SystemMessage(String.Format("A serious internal error has occurred and workflow processing was aborted.{0}", exception.ToString()), SAHL.Core.SystemMessages.SystemMessageSeverityEnum.Error));
                }
				return false;
				//throw;
			}
			finally
			{
				x2logger.LogOnExitWorkflow( "OnStartActivity", instance.ID);
			}
		}

		[CoverageExcludeAttribute]
		public bool OnStartActivityInternal(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			switch(param.ActivityName)
			{
<#foreach(AbstractActivity activity in workflow.Activities)
{#>
				case "<#=activity.Name#>":
					return OnStartActivity_<#=activity.SafeName#>(instance, (IX2<#=workflow.SafeName#>_Data)contextualData, param, messages);
<#}#>				
				default:
					return false;
			}
		}

		[CoverageExcludeAttribute]
		public bool CompleteActivity(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages, ref string AlertMessage)
		{
			x2logger.LogOnEnterWorkflow( "OnCompleteActivity", contextualData, instance, param, new Dictionary<string, object>()  { {"AlertMessage", AlertMessage} } );
			try
			{
				logger.GetThreadLocalStore()[SAHL.Core.Logging.Logger.X2InstanceId] = instance.ID;
                logger.GetThreadLocalStore()[SAHL.Core.Logging.Logger.X2WorkflowName] = param.WorkflowName;
                logger.GetThreadLocalStore()[SAHL.Core.Logging.Logger.X2InstanceData] = param;
                logger.GetThreadLocalStore()[SAHL.Core.Logging.Logger.X2ActivityName] = param.ActivityName;


				Func<Tuple<bool, string>> internalMethod = () =>
				{
					bool item1 = false;
					string item2 = string.Empty;
					item1 = this.OnCompleteActivityInternal(instance, contextualData, param, messages, ref item2);
					Tuple<bool, string> values = new Tuple<bool,string>(item1,item2);
					return values;
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, "<#=workflow.SafeName#>" }, { Logger.X2InstanceData, instance }, { Logger.X2Parameters, param} };
				var returnData = logger.LogMethodMetric(this.loggerSource,"X2MAP","OnCompleteActivity",internalMethod, metricParameters);
				if (!string.IsNullOrEmpty(returnData.Item2))
				{
					AlertMessage = returnData.Item2;
				}
				AlertMessage = returnData.Item2;
				logger.LogThroughputMetric(this.loggerSource,"X2MAP","OnCompleteActivity",metricParameters);
				x2logger.LogOnWorkflowSuccess( "OnCompleteActivity", contextualData, instance, param);
				return returnData.Item1;
			}
			catch(Exception exception)
			{
				x2logger.LogOnWorkflowException( "OnCompleteActivity", instance.ID, exception);
				if (messages.AllMessages.Count() == 0)
                {
                    // add an error message to the message collection so that X2 will definately not continue, ONLY if there are not already messages.
                    messages.AddMessage(new SAHL.Core.SystemMessages.SystemMessage(String.Format("A serious internal error has occurred and workflow processing was aborted.{0}", exception.ToString()), SAHL.Core.SystemMessages.SystemMessageSeverityEnum.Error));
                }
				return false;
				//throw;
			}
			finally
			{
				x2logger.LogOnExitWorkflow( "OnCompleteActivity", instance.ID);
			}
		}

		[CoverageExcludeAttribute]
		public bool OnCompleteActivityInternal(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages, ref string AlertMessage)
		{
			switch(param.ActivityName)
			{
<#foreach(AbstractActivity activity in workflow.Activities)
{#>
				case "<#=activity.Name#>":
					return OnCompleteActivity_<#=activity.SafeName#>(instance, (IX2<#=workflow.SafeName#>_Data)contextualData, param, messages, ref AlertMessage);
<#}#>				
				default:
					return false;
			}
		}

		[CoverageExcludeAttribute]
		public DateTime GetActivityTime(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			x2logger.LogOnEnterWorkflow( "GetActivityTime", contextualData, instance, param, null);
			try
			{
				
				Func<DateTime> internalMethod = () =>
				{
					return this.GetActivityTimeInternal(instance, contextualData, param, messages);
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, "<#=workflow.SafeName#>" }, { Logger.X2InstanceData, instance }, { Logger.X2Parameters, param } };
				var returnData = logger.LogMethodMetric(this.loggerSource,"X2MAP","GetActivityTime",internalMethod, metricParameters);
				logger.LogThroughputMetric(this.loggerSource,"X2MAP","GetActivityTime",metricParameters);
				x2logger.LogOnWorkflowSuccess( "GetActivityTime", contextualData, instance, param);
				return returnData;
			}
			catch(Exception exception)
			{
				x2logger.LogOnWorkflowException( "GetActivityTime", instance.ID, exception);
				if (messages.AllMessages.Count() == 0)
                {
                    // add an error message to the message collection so that X2 will definately not continue, ONLY if there are not already messages.
                    messages.AddMessage(new SAHL.Core.SystemMessages.SystemMessage(String.Format("A serious internal error has occurred and workflow processing was aborted.{0}", exception.ToString()), SAHL.Core.SystemMessages.SystemMessageSeverityEnum.Error));
                }
				return DateTime.Now;
				//throw;
			}
			finally
			{
				x2logger.LogOnExitWorkflow( "GetActivityTime", instance.ID);
			}
		}

		[CoverageExcludeAttribute]
		public DateTime GetActivityTimeInternal(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			switch(param.ActivityName)
			{
<#foreach(TimedActivity activity in workflow.TimedActivities)
{#>
				case "<#=activity.Name#>":
					return GetActivityTime_<#=activity.SafeName#>(instance, (IX2<#=workflow.SafeName#>_Data)contextualData, param, messages);
<#}#>					
				default:
					return DateTime.Now;
			}
		}

		[CoverageExcludeAttribute]
		public string GetStageTransition(InstanceDataModel instance, IX2ContextualDataProvider contextualData,SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			x2logger.LogOnEnterWorkflow( "GetStageTransition", contextualData, instance, param, null);
			try
			{
				Func<string> internalMethod = () =>
				{
					return this.GetStageTransitionInternal(contextualData, instance,  param, messages);
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, "<#=workflow.SafeName#>" }, { Logger.X2InstanceData, instance }, { Logger.X2Parameters, param } };
				var returnData = logger.LogMethodMetric(this.loggerSource,"X2MAP","GetStageTransition",internalMethod, metricParameters);
				logger.LogThroughputMetric(this.loggerSource,"X2MAP","GetStageTransition",metricParameters);
				x2logger.LogOnWorkflowSuccess( "GetStageTransition", contextualData,instance, param);
				return returnData;
			}
			catch(Exception exception)
			{
				x2logger.LogOnWorkflowException( "GetStageTransition", instance.ID, exception);
				return string.Empty;
				//throw;
			}
			finally
			{
				x2logger.LogOnExitWorkflow( "GetStageTransition", instance.ID);
			}
		}

		[CoverageExcludeAttribute]
		public string GetStageTransitionInternal(IX2ContextualDataProvider contextualData, InstanceDataModel instance, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			switch(param.ActivityName)
			{
<#foreach(AbstractActivity activity in workflow.ActivitiesWithStageTransitions)
{#>
				case "<#=activity.Name#>":
					return GetStageTransition_<#=activity.SafeName#>(instance, (IX2<#=workflow.SafeName#>_Data)contextualData, param, messages);
<#}#>						
				default:
					return string.Empty;
			}
		}

		[CoverageExcludeAttribute]
		public string GetActivityMessage(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			x2logger.LogOnEnterWorkflow( "GetActivityMessage", contextualData, instance, param, null);
			try
			{
				Func<string> internalMethod = () =>
				{
					return this.GetActivityMessageInternal(instance, contextualData, param, messages);
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, "<#=workflow.SafeName#>" }, { Logger.X2InstanceData, instance }, { Logger.X2Parameters, param} };
				var returnData = logger.LogMethodMetric(this.loggerSource,"X2MAP","GetActivityMessage",internalMethod, metricParameters);
				logger.LogThroughputMetric(this.loggerSource,"X2MAP","GetActivityMessage",metricParameters);
				x2logger.LogOnWorkflowSuccess( "GetActivityMessage", contextualData, instance, param);
				return returnData;
			}
			catch(Exception exception)
			{
				x2logger.LogOnWorkflowException( "GetActivityMessage", instance.ID, exception);
				return string.Empty;
				//throw;
			}
			finally
			{
				x2logger.LogOnExitWorkflow( "GetActivityMessage", instance.ID);
			}
		}

		[CoverageExcludeAttribute]
		public string GetActivityMessageInternal(InstanceDataModel instance, IX2ContextualDataProvider contextualData, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			switch(param.ActivityName)
			{
<#foreach(AbstractActivity activity in workflow.UserActivities)
{#>
				case "<#=activity.Name#>":
					return GetActivityMessage_<#=activity.SafeName#>(instance, (IX2<#=workflow.SafeName#>_Data)contextualData, param, messages);
<#}#>					
				default:
					return string.Empty;
			}
		}

		[CoverageExcludeAttribute]
		public string GetDynamicRole(InstanceDataModel instance, IX2ContextualDataProvider contextualData, string roleName, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			x2logger.LogOnEnterWorkflow( "GetDynamicRole", contextualData, instance, param, new Dictionary<string, object>() { {"RoleName", roleName} ,{ "WorkflowName", param.WorkflowName}});
			try
			{
				Func<string> internalMethod = () =>
				{
					return this.GetDynamicRoleInternal(instance, contextualData, roleName, param, messages);
				};

				Dictionary<string, object> metricParameters = new Dictionary<string, object>() { { Logger.X2WorkflowName, "<#=workflow.SafeName#>" }, { Logger.X2InstanceData, instance }};
				var returnData = logger.LogMethodMetric(this.loggerSource,"X2MAP","GetDynamicRole",internalMethod, metricParameters);
				logger.LogThroughputMetric(this.loggerSource,"X2MAP","GetDynamicRole",metricParameters);
				x2logger.LogOnWorkflowSuccess( "GetDynamicRole", contextualData, instance, null);
				return returnData;
			}
			catch(Exception exception)
			{
				x2logger.LogOnWorkflowException( "GetDynamicRole", instance.ID, exception);
				return string.Empty;
				//throw;
			}
			finally
			{
				x2logger.LogOnExitWorkflow( "GetDynamicRole", instance.ID);
			}
		}

		[CoverageExcludeAttribute]
		public string GetDynamicRoleInternal(InstanceDataModel instance, IX2ContextualDataProvider contextualData,  string roleName, SAHL.Core.X2.IX2Params param, ISystemMessageCollection messages)
		{
			switch(roleName.Replace(' ', '_')+"_"+param.WorkflowName.Replace(' ', '_'))
			{
<#foreach(WorkflowRole role in workflow.DynamicRoles)
{#>
				case "<#=role.SafeName#>_<#=workflow.SafeName#>":
					return OnGetRole_<#=workflow.SafeName#>_<#=role.SafeName#>(instance, (IX2<#=workflow.SafeName#>_Data)contextualData,roleName , param, messages);
<#}#>				
				default:
					return string.Empty;
			}
		}

		[CoverageExcludeAttribute]
		public IX2ContextualDataProvider GetContextualData(long instanceId)
		{
			return new X2<#=workflow.SafeName#>_Data(instanceId);
		}

		#endregion
	}

	#endregion
	
<#}#>
	public partial class UIStatements : IUIStatementsProvider
    {
		public string UIStatementContext
		{
			get { return "<#=process.SafeName#>";/*Name of the actual process*/ }
		}
	}
}