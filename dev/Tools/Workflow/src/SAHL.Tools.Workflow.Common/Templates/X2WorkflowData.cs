// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SAHL.Tools.Workflow.Common.Templates
{
    using WorkflowElements;
    using System.Data;
    using System.Data.SqlClient;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class X2WorkflowData : X2WorkflowDataBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n\t#region WorkFlowData ");
            
            #line 6 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\t\r\n\tpublic class X2");
            
            #line 8 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("_Data : IContextualDataProvider\r\n\t{\r\n\t\tprivate bool m_HasChanges = false;\r\n");
            
            #line 11 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables)
        {
            
            #line default
            #line hidden
            
            #line 13 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"

            string typeName = "";
            string typeDeclaration = "";
	        switch(customVariable.VariableType)
            {
                case CustomVariableTypeEnum.Bool:
                    typeName = "Boolean";
                    break;
                case CustomVariableTypeEnum.BigInteger:
                    typeName = "Int64";
                    break;
                case CustomVariableTypeEnum.DateTime:
                    typeName = "DateTime";
                    break;
                case CustomVariableTypeEnum.Decimal:
                    typeName = "Decimal";
                    break;
                case CustomVariableTypeEnum.Double:
                    typeName = "Double";
                    break;
                case CustomVariableTypeEnum.Integer:
                    typeName = "Int32";
                    break;
                case CustomVariableTypeEnum.Single:
                    typeName = "Single";
                    break;
                case CustomVariableTypeEnum.String:
                    typeName = "String";
                    break;
            }

            
            #line default
            #line hidden
            this.Write("\t\r\n");
            
            #line 44 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            if(customVariable.VariableType == CustomVariableTypeEnum.DateTime){
            
            #line default
            #line hidden
            this.Write("\t\tprivate ");
            
            #line 45 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeName));
            
            #line default
            #line hidden
            this.Write(" m_");
            
            #line 45 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(" = (DateTime)System.Data.SqlTypes.SqlDateTime.Now;\r\n");
            
            #line 46 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            }else{
            
            #line default
            #line hidden
            this.Write("\t\tprivate ");
            
            #line 47 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeName));
            
            #line default
            #line hidden
            this.Write(" m_");
            
            #line 47 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 48 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            }
            
            #line default
            #line hidden
            this.Write("\t\tpublic ");
            
            #line 49 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 49 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\treturn m_");
            
            #line 53 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t}\r\n\t\t\tset\r\n\t\t\t{\r\n\t\t\t\tm_HasChanges = true;\r\n\t\t\t\tm_");
            
            #line 58 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(" = value;\r\n\t\t\t}\r\n\t\t}\r\n");
            
            #line 61 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
        }
            
            #line default
            #line hidden
            this.Write(@"	}
	
		#region IX2WorkFlowDataProvider Members

		public void LoadData(Int64 InstanceID)
		{
			SqlDataAdapter SDA = null;
			DataTable WorkFlowData = new DataTable();
			try
			{
				WorkerHelper.FillFromQuery(WorkFlowData, ""select * from [X2DATA].");
            
            #line 72 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write(" (nolock) where InstanceID = \" + InstanceID, Tran.Context, null);\r\n\t\t\t\tif (WorkFl" +
                    "owData.Rows.Count > 0)\r\n\t\t\t\t{\r\n");
            
            #line 75 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables)
        {
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\tif(WorkFlowData.Rows[0][\"");
            
            #line 77 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write("\"] != DBNull.Value)\r\n\t\t\t\t\t\tm_CapBroker = Convert.ToString(WorkFlowData.Rows[0][\"");
            
            #line 78 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write("\"]);\r\n");
            
            #line 79 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
        }
            
            #line default
            #line hidden
            this.Write(@"			
				}
			}
			catch
			{
			}
			finally
			{
				if(SDA != null)
					SDA.Dispose();
			}
		}

		public void SetDataFields(System.Collections.Generic.Dictionary<string, string> Fields)
		{
			if (Fields != null)
			{
				string[] Keys = new string[Fields.Count];
				Fields.Keys.CopyTo(Keys, 0);
				for (int i = 0; i < Fields.Count; i++)
				{
					switch (Keys[i].ToLower())
					{
");
            
            #line 102 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\tcase \"");
            
            #line 103 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName.ToLower()));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\t\t\t");
            
            #line 104 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(" = Convert.ToString(Fields[Keys[i]]);\r\n\t\t\t\t\t\t\tbreak;\r\n");
            
            #line 106 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
        }
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic void SaveData(Int64 InstanceID)\r\n\t\t{\r\n\t\t\tif(" +
                    "m_HasChanges == true)\r\n\t\t\t{\r\n\t\t\t\t// Create a collection\r\n\t\t\t\tParameterCollection" +
                    " Parameters = new ParameterCollection();\r\n\t\t\t\t// Add the required parameters\r\n");
            
            #line 119 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
string updateStr="";int loopcnt = 0;
            
            #line default
            #line hidden
            
            #line 120 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){
	updateStr += "["+ customVariable.SafeName + "] = @P" + loopcnt.ToString() + ", ";
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\r\n");
            
            #line 122 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
if(this.RequiresNullCheck(customVariable.VariableType)){
            
            #line default
            #line hidden
            this.Write("\t\t\t\tif(m_");
            
            #line 123 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(" != null)\r\n\t\t\t\t\tWorkerHelper.AddParameter(Parameters, \"@P");
            
            #line 124 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(loopcnt.ToString()));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 124 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SqlDataTypeFromCustomVariableType(customVariable.VariableType)));
            
            #line default
            #line hidden
            this.Write(", ParameterDirection.Input , m_");
            
            #line 124 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t\telse\r\n\t\t\t\t\tWorkerHelper.AddParameter(Parameters, \"@P");
            
            #line 126 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(loopcnt.ToString()));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 126 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SqlDataTypeFromCustomVariableType(customVariable.VariableType)));
            
            #line default
            #line hidden
            this.Write(", ParameterDirection.Input , DBNull.Value);\r\n");
            
            #line 127 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
}else{
            
            #line default
            #line hidden
            this.Write("                WorkerHelper.AddParameter(Parameters, \"@P");
            
            #line 128 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(loopcnt.ToString()));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 128 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SqlDataTypeFromCustomVariableType(customVariable.VariableType)));
            
            #line default
            #line hidden
            this.Write(", ParameterDirection.Input , m_");
            
            #line 128 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 129 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
}
            
            #line default
            #line hidden
            
            #line 130 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
loopcnt++;}updateStr=updateStr.Substring(0,updateStr.Length-2);
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\r\n\t\t\t\tWorkerHelper.ExecuteNonQuery(Tran.Context, \"update [X2DATA].[");
            
            #line 131 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("] with (rowlock) set ");
            
            #line 131 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(updateStr));
            
            #line default
            #line hidden
            this.Write(@" where InstanceID = '"" + InstanceID + ""'"", Parameters);
			}
		}

		public void InsertData(IActiveDataTransaction Tran, Int64 InstanceID, Dictionary<string, string> Fields)
		{
			//// Set Data Fields
			SetDataFields(Fields);
			// Create a collection
			ParameterCollection Parameters = new ParameterCollection();
			// Add the required parameters
");
            
            #line 142 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
        updateStr="";
          loopcnt = 0;
            
            #line default
            #line hidden
            
            #line 144 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){updateStr += "["+ customVariable.SafeName + "] = @P" + loopcnt.ToString() + ", ";
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\r\n");
            
            #line 145 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            if(this.RequiresNullCheck(customVariable.VariableType)){
            
            #line default
            #line hidden
            this.Write("\t\t\t\tif(m_");
            
            #line 146 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(" != null)\r\n\t\t\t\t\tWorkerHelper.AddParameter(Parameters, \"@P");
            
            #line 147 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(loopcnt.ToString()));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 147 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SqlDataTypeFromCustomVariableType(customVariable.VariableType)));
            
            #line default
            #line hidden
            this.Write(", ParameterDirection.Input , m_");
            
            #line 147 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t\telse\r\n\t\t\t\t\tWorkerHelper.AddParameter(Parameters, \"@P");
            
            #line 149 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(loopcnt.ToString()));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 149 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SqlDataTypeFromCustomVariableType(customVariable.VariableType)));
            
            #line default
            #line hidden
            this.Write(", ParameterDirection.Input , DBNull.Value);\r\n");
            
            #line 150 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            }else{
            
            #line default
            #line hidden
            this.Write("                WorkerHelper.AddParameter(Parameters, \"@P");
            
            #line 151 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(loopcnt.ToString()));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 151 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SqlDataTypeFromCustomVariableType(customVariable.VariableType)));
            
            #line default
            #line hidden
            this.Write(", ParameterDirection.Input , m_");
            
            #line 151 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 152 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            }
            
            #line default
            #line hidden
            
            #line 153 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            loopcnt++;}updateStr=updateStr.Substring(0,updateStr.Length-2);
            
            #line default
            #line hidden
            this.Write("\t\r\n\t\t\tWorkerHelper.ExecuteNonQuery(Tran.Context, \"insert into [X2DATA].[");
            
            #line 154 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(workflow.SafeName));
            
            #line default
            #line hidden
            this.Write("] values( \" + InstanceID + \", @P0, @P1, @P2, @P3, @P4, @P5, @P6, @P7, @P8, @P9, @" +
                    "P10, @P11, @P12)\", Parameters);\r\n\t\t}\r\n\r\n\t\tpublic bool Contains(string FieldName)" +
                    "\r\n\t\t{\r\n\t\t\tswitch (FieldName.ToLower())\r\n\t\t\t{\r\n");
            
            #line 161 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase \"");
            
            #line 162 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName.ToLower()));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\treturn true;\r\n");
            
            #line 164 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic string GetField(st" +
                    "ring FieldName)\r\n\t\t{\r\n\t\t\tswitch (FieldName.ToLower())\r\n\t\t\t{\r\n");
            
            #line 174 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
        foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){
            
            #line default
            #line hidden
            this.Write("\t\t\t\tcase \"");
            
            #line 175 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName.ToLower()));
            
            #line default
            #line hidden
            this.Write("\":\r\n\t\t\t\t\treturn m_");
            
            #line 176 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(".ToString();\r\n");
            
            #line 177 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
}
            
            #line default
            #line hidden
            this.Write(@"			
				default:
					return """";
			}
		}

		public ISqlStatement<DynamicObject> GetUpdateStatement()
		{
			return null;
		}

		public Dictionary<string, string> GetData()
		{
			Dictionary<string, string> Data = new Dictionary<string, string>();
");
            
            #line 191 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
foreach(AbstractCustomVariable customVariable in workflow.CustomVariables){
            
            #line default
            #line hidden
            
            #line 192 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
if(this.RequiresNullCheck(customVariable.VariableType)){
            
            #line default
            #line hidden
            this.Write("\t\t\tif(m_");
            
            #line 193 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(" != null)\r\n\t\t\t\tData.Add( \"");
            
            #line 194 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName.ToLower()));
            
            #line default
            #line hidden
            this.Write("\", m_");
            
            #line 194 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(".ToString());\r\n");
            
            #line 195 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
}else{
            
            #line default
            #line hidden
            this.Write("\t\t\tData.Add( \"");
            
            #line 196 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName.ToLower()));
            
            #line default
            #line hidden
            this.Write("\", m_");
            
            #line 196 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(customVariable.SafeName));
            
            #line default
            #line hidden
            this.Write(".ToString());\r\n");
            
            #line 197 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
}
            
            #line default
            #line hidden
            
            #line 198 "C:\sourcecode\SAHL-Source\SAHL-Tools\SAHL.Tools.Workflow\SAHL.Tools.Workflow.Common\Templates\X2WorkflowData.tt"
}
            
            #line default
            #line hidden
            this.Write("\t\treturn Data;\r\n\t}\r\n\r\n\t#endregion");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class X2WorkflowDataBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
